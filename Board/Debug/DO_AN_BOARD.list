
DO_AN_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e84  08004e84  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004e84  08004e84  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e84  08004e84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e84  08004e84  00014e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e88  08004e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000070  08004efc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08004efc  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144dc  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ac  00000000  00000000  00034575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00036e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00037e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197be  00000000  00000000  00038d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139ec  00000000  00000000  000524e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da0c  00000000  00000000  00065ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f38de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004708  00000000  00000000  000f3934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ce4 	.word	0x08004ce4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004ce4 	.word	0x08004ce4

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	2142      	movs	r1, #66	; 0x42
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 fb9d 	bl	80018d8 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	200000d4 	.word	0x200000d4

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	2142      	movs	r1, #66	; 0x42
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f001 fb6d 	bl	80018d8 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	200000d4 	.word	0x200000d4

0800020c <lcd_init>:

void lcd_init (void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000210:	2033      	movs	r0, #51	; 0x33
 8000212:	f7ff ff9b 	bl	800014c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000216:	2032      	movs	r0, #50	; 0x32
 8000218:	f7ff ff98 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800021c:	2032      	movs	r0, #50	; 0x32
 800021e:	f000 fe75 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000222:	2028      	movs	r0, #40	; 0x28
 8000224:	f7ff ff92 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000228:	2032      	movs	r0, #50	; 0x32
 800022a:	f000 fe6f 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800022e:	2001      	movs	r0, #1
 8000230:	f7ff ff8c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000234:	2032      	movs	r0, #50	; 0x32
 8000236:	f000 fe69 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800023a:	2006      	movs	r0, #6
 800023c:	f7ff ff86 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000240:	2032      	movs	r0, #50	; 0x32
 8000242:	f000 fe63 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000246:	200c      	movs	r0, #12
 8000248:	f7ff ff80 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800024c:	2032      	movs	r0, #50	; 0x32
 800024e:	f000 fe5d 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000252:	2002      	movs	r0, #2
 8000254:	f7ff ff7a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000258:	2032      	movs	r0, #50	; 0x32
 800025a:	f000 fe57 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd (0x80);
 800025e:	2080      	movs	r0, #128	; 0x80
 8000260:	f7ff ff74 	bl	800014c <lcd_send_cmd>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}

08000268 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000270:	e006      	b.n	8000280 <lcd_send_string+0x18>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	1c5a      	adds	r2, r3, #1
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff96 	bl	80001ac <lcd_send_data>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1f4      	bne.n	8000272 <lcd_send_string+0xa>
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b084      	sub	sp, #16
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d108      	bne.n	80002b4 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	4413      	add	r3, r2
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	337f      	adds	r3, #127	; 0x7f
 80002b0:	73fb      	strb	r3, [r7, #15]
 80002b2:	e003      	b.n	80002bc <lcd_goto_XY+0x2a>
	}
	else
	{
		pos_Addr = 0xC0+ col;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	3b40      	subs	r3, #64	; 0x40
 80002ba:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	4618      	mov	r0, r3
 80002c0:	f7ff ff44 	bl	800014c <lcd_send_cmd>
}
 80002c4:	bf00      	nop
 80002c6:	3710      	adds	r7, #16
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <lcd_show_value>:

void lcd_show_value(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	  lcd_goto_XY(0, 0);
 80002d0:	2100      	movs	r1, #0
 80002d2:	2000      	movs	r0, #0
 80002d4:	f7ff ffdd 	bl	8000292 <lcd_goto_XY>
	  lcd_send_string("TEMP: ");
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <lcd_show_value+0x40>)
 80002da:	f7ff ffc5 	bl	8000268 <lcd_send_string>
	  lcd_goto_XY(0, 8);
 80002de:	2108      	movs	r1, #8
 80002e0:	2000      	movs	r0, #0
 80002e2:	f7ff ffd6 	bl	8000292 <lcd_goto_XY>
	  lcd_send_string(humid);
 80002e6:	480a      	ldr	r0, [pc, #40]	; (8000310 <lcd_show_value+0x44>)
 80002e8:	f7ff ffbe 	bl	8000268 <lcd_send_string>
	  lcd_goto_XY(1, 0);
 80002ec:	2100      	movs	r1, #0
 80002ee:	2001      	movs	r0, #1
 80002f0:	f7ff ffcf 	bl	8000292 <lcd_goto_XY>
	  lcd_send_string("HUMID: ");
 80002f4:	4807      	ldr	r0, [pc, #28]	; (8000314 <lcd_show_value+0x48>)
 80002f6:	f7ff ffb7 	bl	8000268 <lcd_send_string>
	  lcd_goto_XY(1, 8);
 80002fa:	2108      	movs	r1, #8
 80002fc:	2001      	movs	r0, #1
 80002fe:	f7ff ffc8 	bl	8000292 <lcd_goto_XY>
	  lcd_send_string(temp);
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <lcd_show_value+0x4c>)
 8000304:	f7ff ffb0 	bl	8000268 <lcd_send_string>
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	08004cfc 	.word	0x08004cfc
 8000310:	200000b8 	.word	0x200000b8
 8000314:	08004d04 	.word	0x08004d04
 8000318:	200000a4 	.word	0x200000a4

0800031c <dht20_init>:
#define SLAVE_ADDRESS_DHT20 (0x38 << 1)

uint16_t value_x10[2] = {0, 0};
char temp[20], humid[20];

void dht20_init(){
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af02      	add	r7, sp, #8
	//Set register when call a wrong reset
	uint8_t init[3];

	init[0] = 0xA8;
 8000322:	23a8      	movs	r3, #168	; 0xa8
 8000324:	713b      	strb	r3, [r7, #4]
	init[1] = 0x00;
 8000326:	2300      	movs	r3, #0
 8000328:	717b      	strb	r3, [r7, #5]
	init[2] = 0x00;
 800032a:	2300      	movs	r3, #0
 800032c:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) init, 3, 0xFF);
 800032e:	1d3a      	adds	r2, r7, #4
 8000330:	23ff      	movs	r3, #255	; 0xff
 8000332:	9300      	str	r3, [sp, #0]
 8000334:	2303      	movs	r3, #3
 8000336:	2170      	movs	r1, #112	; 0x70
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <dht20_init+0x54>)
 800033a:	f001 facd 	bl	80018d8 <HAL_I2C_Master_Transmit>
	setTimer(10);
 800033e:	200a      	movs	r0, #10
 8000340:	f000 fb62 	bl	8000a08 <setTimer>

	init[0] = 0xBE;
 8000344:	23be      	movs	r3, #190	; 0xbe
 8000346:	713b      	strb	r3, [r7, #4]
	init[1] = 0x08;
 8000348:	2308      	movs	r3, #8
 800034a:	717b      	strb	r3, [r7, #5]
	init[2] = 0x00;
 800034c:	2300      	movs	r3, #0
 800034e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) init, 3, 0xFF);
 8000350:	1d3a      	adds	r2, r7, #4
 8000352:	23ff      	movs	r3, #255	; 0xff
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	2303      	movs	r3, #3
 8000358:	2170      	movs	r1, #112	; 0x70
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <dht20_init+0x54>)
 800035c:	f001 fabc 	bl	80018d8 <HAL_I2C_Master_Transmit>
	setTimer(10);
 8000360:	200a      	movs	r0, #10
 8000362:	f000 fb51 	bl	8000a08 <setTimer>
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	200000d4 	.word	0x200000d4

08000374 <dht20_reset>:

void dht20_reset(uint8_t regist){
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af02      	add	r7, sp, #8
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
	//reset register
	uint8_t reset[3], reply[3];

	reset[0] = regist;
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	733b      	strb	r3, [r7, #12]
	reset[1] = 0x00;
 8000382:	2300      	movs	r3, #0
 8000384:	737b      	strb	r3, [r7, #13]
	reset[2] = 0x00;
 8000386:	2300      	movs	r3, #0
 8000388:	73bb      	strb	r3, [r7, #14]
 	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) reset, 3, 0xFF);
 800038a:	f107 020c 	add.w	r2, r7, #12
 800038e:	23ff      	movs	r3, #255	; 0xff
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	2303      	movs	r3, #3
 8000394:	2170      	movs	r1, #112	; 0x70
 8000396:	4814      	ldr	r0, [pc, #80]	; (80003e8 <dht20_reset+0x74>)
 8000398:	f001 fa9e 	bl	80018d8 <HAL_I2C_Master_Transmit>
	setTimer(10);
 800039c:	200a      	movs	r0, #10
 800039e:	f000 fb33 	bl	8000a08 <setTimer>

	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) reply, 3, 0xFF);
 80003a2:	f107 0208 	add.w	r2, r7, #8
 80003a6:	23ff      	movs	r3, #255	; 0xff
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	2303      	movs	r3, #3
 80003ac:	2171      	movs	r1, #113	; 0x71
 80003ae:	480e      	ldr	r0, [pc, #56]	; (80003e8 <dht20_reset+0x74>)
 80003b0:	f001 fb90 	bl	8001ad4 <HAL_I2C_Master_Receive>
	reset[0] = 0xB0 | regist;
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	733b      	strb	r3, [r7, #12]
	reset[1] = reply[1];
 80003be:	7a7b      	ldrb	r3, [r7, #9]
 80003c0:	737b      	strb	r3, [r7, #13]
	reset[2] = reply[2];
 80003c2:	7abb      	ldrb	r3, [r7, #10]
 80003c4:	73bb      	strb	r3, [r7, #14]
	setTimer(10);
 80003c6:	200a      	movs	r0, #10
 80003c8:	f000 fb1e 	bl	8000a08 <setTimer>

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) reset, 3, 0xFF);
 80003cc:	f107 020c 	add.w	r2, r7, #12
 80003d0:	23ff      	movs	r3, #255	; 0xff
 80003d2:	9300      	str	r3, [sp, #0]
 80003d4:	2303      	movs	r3, #3
 80003d6:	2170      	movs	r1, #112	; 0x70
 80003d8:	4803      	ldr	r0, [pc, #12]	; (80003e8 <dht20_reset+0x74>)
 80003da:	f001 fa7d 	bl	80018d8 <HAL_I2C_Master_Transmit>
}
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	200000d4 	.word	0x200000d4

080003ec <dht20_start>:

void dht20_start(){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af02      	add	r7, sp, #8
	//query the DHT20
	uint8_t status[1];
	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) status, 1, 0xFF);
 80003f2:	1d3a      	adds	r2, r7, #4
 80003f4:	23ff      	movs	r3, #255	; 0xff
 80003f6:	9300      	str	r3, [sp, #0]
 80003f8:	2301      	movs	r3, #1
 80003fa:	2171      	movs	r1, #113	; 0x71
 80003fc:	481b      	ldr	r0, [pc, #108]	; (800046c <dht20_start+0x80>)
 80003fe:	f001 fb69 	bl	8001ad4 <HAL_I2C_Master_Receive>

	if((status[0] & 0x18) != 0x18){
 8000402:	793b      	ldrb	r3, [r7, #4]
 8000404:	f003 0318 	and.w	r3, r3, #24
 8000408:	2b18      	cmp	r3, #24
 800040a:	d00d      	beq.n	8000428 <dht20_start+0x3c>
		dht20_reset(0x1B);
 800040c:	201b      	movs	r0, #27
 800040e:	f7ff ffb1 	bl	8000374 <dht20_reset>
		dht20_reset(0x1C);
 8000412:	201c      	movs	r0, #28
 8000414:	f7ff ffae 	bl	8000374 <dht20_reset>
		dht20_reset(0x1E);
 8000418:	201e      	movs	r0, #30
 800041a:	f7ff ffab 	bl	8000374 <dht20_reset>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4813      	ldr	r0, [pc, #76]	; (8000470 <dht20_start+0x84>)
 8000424:	f001 f8da 	bl	80015dc <HAL_GPIO_WritePin>
	}

	if ((status[0] & 0x18) == 0x18){
 8000428:	793b      	ldrb	r3, [r7, #4]
 800042a:	f003 0318 	and.w	r3, r3, #24
 800042e:	2b18      	cmp	r3, #24
 8000430:	d104      	bne.n	800043c <dht20_start+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8000432:	2201      	movs	r2, #1
 8000434:	2102      	movs	r1, #2
 8000436:	480e      	ldr	r0, [pc, #56]	; (8000470 <dht20_start+0x84>)
 8000438:	f001 f8d0 	bl	80015dc <HAL_GPIO_WritePin>
	}

	uint8_t data[3] = {0xAC, 0x33, 0x00};
 800043c:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <dht20_start+0x88>)
 800043e:	463b      	mov	r3, r7
 8000440:	6812      	ldr	r2, [r2, #0]
 8000442:	4611      	mov	r1, r2
 8000444:	8019      	strh	r1, [r3, #0]
 8000446:	3302      	adds	r3, #2
 8000448:	0c12      	lsrs	r2, r2, #16
 800044a:	701a      	strb	r2, [r3, #0]

	//HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) trigger, 1, 0xFF);
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) data, 3, 0xFF);
 800044c:	463a      	mov	r2, r7
 800044e:	23ff      	movs	r3, #255	; 0xff
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	2303      	movs	r3, #3
 8000454:	2170      	movs	r1, #112	; 0x70
 8000456:	4805      	ldr	r0, [pc, #20]	; (800046c <dht20_start+0x80>)
 8000458:	f001 fa3e 	bl	80018d8 <HAL_I2C_Master_Transmit>
	setTimer(80);
 800045c:	2050      	movs	r0, #80	; 0x50
 800045e:	f000 fad3 	bl	8000a08 <setTimer>
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	200000d4 	.word	0x200000d4
 8000470:	40010800 	.word	0x40010800
 8000474:	08004d0c 	.word	0x08004d0c

08000478 <dht20_read>:

void dht20_read(uint16_t* value){
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af02      	add	r7, sp, #8
 800047e:	6078      	str	r0, [r7, #4]
	dht20_start();
 8000480:	f7ff ffb4 	bl	80003ec <dht20_start>
	uint8_t data[7];
	uint32_t Temper = 0, Humid = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) data, 7, 0xFF);
 800048c:	f107 0208 	add.w	r2, r7, #8
 8000490:	23ff      	movs	r3, #255	; 0xff
 8000492:	9300      	str	r3, [sp, #0]
 8000494:	2307      	movs	r3, #7
 8000496:	2171      	movs	r1, #113	; 0x71
 8000498:	4824      	ldr	r0, [pc, #144]	; (800052c <dht20_read+0xb4>)
 800049a:	f001 fb1b 	bl	8001ad4 <HAL_I2C_Master_Receive>

	//Humid
	Humid = (Humid | data[1]) << 8;
 800049e:	7a7b      	ldrb	r3, [r7, #9]
 80004a0:	461a      	mov	r2, r3
 80004a2:	693b      	ldr	r3, [r7, #16]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	021b      	lsls	r3, r3, #8
 80004a8:	613b      	str	r3, [r7, #16]
	Humid = (Humid | data[2]) << 8;
 80004aa:	7abb      	ldrb	r3, [r7, #10]
 80004ac:	461a      	mov	r2, r3
 80004ae:	693b      	ldr	r3, [r7, #16]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	021b      	lsls	r3, r3, #8
 80004b4:	613b      	str	r3, [r7, #16]
	Humid = Humid | data[3];
 80004b6:	7afb      	ldrb	r3, [r7, #11]
 80004b8:	461a      	mov	r2, r3
 80004ba:	693b      	ldr	r3, [r7, #16]
 80004bc:	4313      	orrs	r3, r2
 80004be:	613b      	str	r3, [r7, #16]
	Humid = Humid >> 4;
 80004c0:	693b      	ldr	r3, [r7, #16]
 80004c2:	091b      	lsrs	r3, r3, #4
 80004c4:	613b      	str	r3, [r7, #16]
    Humid = (Humid * 100 * 10 / 1024 / 1024);
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004cc:	fb02 f303 	mul.w	r3, r2, r3
 80004d0:	0d1b      	lsrs	r3, r3, #20
 80004d2:	613b      	str	r3, [r7, #16]
    value[0] = Humid;
 80004d4:	693b      	ldr	r3, [r7, #16]
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	801a      	strh	r2, [r3, #0]

	//Temperature
    Temper = (Temper | data[3]) << 8;
 80004dc:	7afb      	ldrb	r3, [r7, #11]
 80004de:	461a      	mov	r2, r3
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	021b      	lsls	r3, r3, #8
 80004e6:	617b      	str	r3, [r7, #20]
    Temper = (Temper | data[4]) << 8;
 80004e8:	7b3b      	ldrb	r3, [r7, #12]
 80004ea:	461a      	mov	r2, r3
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	4313      	orrs	r3, r2
 80004f0:	021b      	lsls	r3, r3, #8
 80004f2:	617b      	str	r3, [r7, #20]
    Temper = Temper | data[5];
 80004f4:	7b7b      	ldrb	r3, [r7, #13]
 80004f6:	461a      	mov	r2, r3
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	4313      	orrs	r3, r2
 80004fc:	617b      	str	r3, [r7, #20]
    Temper = Temper & 0xfffff;
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000504:	617b      	str	r3, [r7, #20]
    Temper = Temper*200*10/1024/1024 - 500;
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800050c:	fb02 f303 	mul.w	r3, r2, r3
 8000510:	0d1b      	lsrs	r3, r3, #20
 8000512:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000516:	617b      	str	r3, [r7, #20]
	value[1] = Temper;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	3302      	adds	r3, #2
 800051c:	697a      	ldr	r2, [r7, #20]
 800051e:	b292      	uxth	r2, r2
 8000520:	801a      	strh	r2, [r3, #0]

}
 8000522:	bf00      	nop
 8000524:	3718      	adds	r7, #24
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200000d4 	.word	0x200000d4

08000530 <dht20_output>:

void dht20_output(){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	dht20_read(value_x10);
 8000534:	481c      	ldr	r0, [pc, #112]	; (80005a8 <dht20_output+0x78>)
 8000536:	f7ff ff9f 	bl	8000478 <dht20_read>
	//Display on the LCD
//	sprintf(temp, "TEMP:  %d.%d %cC",value_x10[1]/10,value_x10[1]%10 ,0b11011111);
//	sprintf(humid,"HUMID: %01d.%d %%   ",value_x10[0]/10,value_x10[0]%10);
		sprintf(temp, "%d.%d ",value_x10[1]/10,value_x10[1]%10 );
 800053a:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <dht20_output+0x78>)
 800053c:	885b      	ldrh	r3, [r3, #2]
 800053e:	4a1b      	ldr	r2, [pc, #108]	; (80005ac <dht20_output+0x7c>)
 8000540:	fba2 2303 	umull	r2, r3, r2, r3
 8000544:	08db      	lsrs	r3, r3, #3
 8000546:	b29b      	uxth	r3, r3
 8000548:	4618      	mov	r0, r3
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <dht20_output+0x78>)
 800054c:	885a      	ldrh	r2, [r3, #2]
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <dht20_output+0x7c>)
 8000550:	fba3 1302 	umull	r1, r3, r3, r2
 8000554:	08d9      	lsrs	r1, r3, #3
 8000556:	460b      	mov	r3, r1
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	440b      	add	r3, r1
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	b29b      	uxth	r3, r3
 8000562:	4602      	mov	r2, r0
 8000564:	4912      	ldr	r1, [pc, #72]	; (80005b0 <dht20_output+0x80>)
 8000566:	4813      	ldr	r0, [pc, #76]	; (80005b4 <dht20_output+0x84>)
 8000568:	f003 fef2 	bl	8004350 <siprintf>
		sprintf(humid,"%01d.%d    ",value_x10[0]/10,value_x10[0]%10);
 800056c:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <dht20_output+0x78>)
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <dht20_output+0x7c>)
 8000572:	fba2 2303 	umull	r2, r3, r2, r3
 8000576:	08db      	lsrs	r3, r3, #3
 8000578:	b29b      	uxth	r3, r3
 800057a:	4618      	mov	r0, r3
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <dht20_output+0x78>)
 800057e:	881a      	ldrh	r2, [r3, #0]
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <dht20_output+0x7c>)
 8000582:	fba3 1302 	umull	r1, r3, r3, r2
 8000586:	08d9      	lsrs	r1, r3, #3
 8000588:	460b      	mov	r3, r1
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	440b      	add	r3, r1
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	b29b      	uxth	r3, r3
 8000594:	4602      	mov	r2, r0
 8000596:	4908      	ldr	r1, [pc, #32]	; (80005b8 <dht20_output+0x88>)
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <dht20_output+0x8c>)
 800059a:	f003 fed9 	bl	8004350 <siprintf>
	lcd_show_value();
 800059e:	f7ff fe95 	bl	80002cc <lcd_show_value>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000008c 	.word	0x2000008c
 80005ac:	cccccccd 	.word	0xcccccccd
 80005b0:	08004d10 	.word	0x08004d10
 80005b4:	200000a4 	.word	0x200000a4
 80005b8:	08004d18 	.word	0x08004d18
 80005bc:	200000b8 	.word	0x200000b8

080005c0 <init_variables>:

int status=0;
int tempInt;    // Biến toàn cục không khởi tạo
int humidInt;

void init_variables() {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    tempInt = atoi(temp);  // Khởi tạo giá trị trong hàm
 80005c4:	4806      	ldr	r0, [pc, #24]	; (80005e0 <init_variables+0x20>)
 80005c6:	f003 fe8d 	bl	80042e4 <atoi>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <init_variables+0x24>)
 80005ce:	6013      	str	r3, [r2, #0]
    humidInt = atoi(humid);
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <init_variables+0x28>)
 80005d2:	f003 fe87 	bl	80042e4 <atoi>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a04      	ldr	r2, [pc, #16]	; (80005ec <init_variables+0x2c>)
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200000a4 	.word	0x200000a4
 80005e4:	200000cc 	.word	0x200000cc
 80005e8:	200000b8 	.word	0x200000b8
 80005ec:	200000d0 	.word	0x200000d0

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fc28 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f836 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f944 	bl	8000888 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000600:	f000 f874 	bl	80006ec <MX_I2C1_Init>
  MX_TIM2_Init();
 8000604:	f000 f8a0 	bl	8000748 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000608:	f000 f914 	bl	8000834 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800060c:	f000 f8e8 	bl	80007e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  LCD_I2C_Init();
  lcd_init();
 8000610:	f7ff fdfc 	bl	800020c <lcd_init>
  dht20_init();
 8000614:	f7ff fe82 	bl	800031c <dht20_init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000618:	480e      	ldr	r0, [pc, #56]	; (8000654 <main+0x64>)
 800061a:	f002 fcab 	bl	8002f74 <HAL_TIM_Base_Start_IT>
  setTimer(100);
 800061e:	2064      	movs	r0, #100	; 0x64
 8000620:	f000 f9f2 	bl	8000a08 <setTimer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Transmit(&huart2, temp, sizeof(temp), 1000);
 8000624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000628:	2214      	movs	r2, #20
 800062a:	490b      	ldr	r1, [pc, #44]	; (8000658 <main+0x68>)
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <main+0x6c>)
 800062e:	f003 f893 	bl	8003758 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, humid, sizeof(humid), 1000);
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	2214      	movs	r2, #20
 8000638:	4909      	ldr	r1, [pc, #36]	; (8000660 <main+0x70>)
 800063a:	480a      	ldr	r0, [pc, #40]	; (8000664 <main+0x74>)
 800063c:	f003 f88c 	bl	8003758 <HAL_UART_Transmit>
	  dht20_output();
 8000640:	f7ff ff76 	bl	8000530 <dht20_output>
	  HAL_Delay(500);
 8000644:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000648:	f000 fc60 	bl	8000f0c <HAL_Delay>
	   init_variables() ;
 800064c:	f7ff ffb8 	bl	80005c0 <init_variables>
	  HAL_UART_Transmit(&huart2, temp, sizeof(temp), 1000);
 8000650:	e7e8      	b.n	8000624 <main+0x34>
 8000652:	bf00      	nop
 8000654:	20000170 	.word	0x20000170
 8000658:	200000a4 	.word	0x200000a4
 800065c:	200001b8 	.word	0x200001b8
 8000660:	200000b8 	.word	0x200000b8
 8000664:	20000128 	.word	0x20000128

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b090      	sub	sp, #64	; 0x40
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	2228      	movs	r2, #40	; 0x28
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 fe62 	bl	8004340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068a:	2302      	movs	r3, #2
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068e:	2301      	movs	r3, #1
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000692:	2310      	movs	r3, #16
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800069a:	2300      	movs	r3, #0
 800069c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800069e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0318 	add.w	r3, r7, #24
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 f805 	bl	80026b8 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006b4:	f000 f97d 	bl	80009b2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2102      	movs	r1, #2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fa70 	bl	8002bb8 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006de:	f000 f968 	bl	80009b2 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3740      	adds	r7, #64	; 0x40
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	; (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_I2C1_Init+0x50>)
 800072a:	f000 ff91 	bl	8001650 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 f93d 	bl	80009b2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000d4 	.word	0x200000d4
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075c:	463b      	mov	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_TIM2_Init+0x94>)
 8000766:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800076a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_TIM2_Init+0x94>)
 800076e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000772:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_TIM2_Init+0x94>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_TIM2_Init+0x94>)
 800077c:	2263      	movs	r2, #99	; 0x63
 800077e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_TIM2_Init+0x94>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_TIM2_Init+0x94>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800078c:	4813      	ldr	r0, [pc, #76]	; (80007dc <MX_TIM2_Init+0x94>)
 800078e:	f002 fba1 	bl	8002ed4 <HAL_TIM_Base_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000798:	f000 f90b 	bl	80009b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	4619      	mov	r1, r3
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_TIM2_Init+0x94>)
 80007aa:	f002 fd25 	bl	80031f8 <HAL_TIM_ConfigClockSource>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007b4:	f000 f8fd 	bl	80009b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_TIM2_Init+0x94>)
 80007c6:	f002 ff07 	bl	80035d8 <HAL_TIMEx_MasterConfigSynchronization>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007d0:	f000 f8ef 	bl	80009b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000170 	.word	0x20000170

080007e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USART1_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <MX_USART1_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_USART1_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART1_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART1_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USART1_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USART1_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USART1_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USART1_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USART1_UART_Init+0x4c>)
 8000818:	f002 ff4e 	bl	80036b8 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f8c6 	bl	80009b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000128 	.word	0x20000128
 8000830:	40013800 	.word	0x40013800

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MX_USART2_UART_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800086c:	f002 ff24 	bl	80036b8 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000876:	f000 f89c 	bl	80009b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200001b8 	.word	0x200001b8
 8000884:	40004400 	.word	0x40004400

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089c:	4b38      	ldr	r3, [pc, #224]	; (8000980 <MX_GPIO_Init+0xf8>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a37      	ldr	r2, [pc, #220]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b35      	ldr	r3, [pc, #212]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0310 	and.w	r3, r3, #16
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b4:	4b32      	ldr	r3, [pc, #200]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a31      	ldr	r2, [pc, #196]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008ba:	f043 0320 	orr.w	r3, r3, #32
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0320 	and.w	r3, r3, #32
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a2b      	ldr	r2, [pc, #172]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b29      	ldr	r3, [pc, #164]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a25      	ldr	r2, [pc, #148]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008ea:	f043 0308 	orr.w	r3, r3, #8
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <MX_GPIO_Init+0xf8>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0308 	and.w	r3, r3, #8
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Alpha_Pin|Belta_Pin|LED_1_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2123      	movs	r1, #35	; 0x23
 8000900:	4820      	ldr	r0, [pc, #128]	; (8000984 <MX_GPIO_Init+0xfc>)
 8000902:	f000 fe6b 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090c:	481e      	ldr	r0, [pc, #120]	; (8000988 <MX_GPIO_Init+0x100>)
 800090e:	f000 fe65 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_GPIO_Init+0x104>)
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4619      	mov	r1, r3
 8000926:	4818      	ldr	r0, [pc, #96]	; (8000988 <MX_GPIO_Init+0x100>)
 8000928:	f000 fcd4 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Alpha_Pin Belta_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = Alpha_Pin|Belta_Pin|LED_1_Pin;
 800092c:	2323      	movs	r3, #35	; 0x23
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2302      	movs	r3, #2
 800093a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4619      	mov	r1, r3
 8000942:	4810      	ldr	r0, [pc, #64]	; (8000984 <MX_GPIO_Init+0xfc>)
 8000944:	f000 fcc6 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8000948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800094c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2302      	movs	r3, #2
 8000958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0310 	add.w	r3, r7, #16
 800095e:	4619      	mov	r1, r3
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <MX_GPIO_Init+0x100>)
 8000962:	f000 fcb7 	bl	80012d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2028      	movs	r0, #40	; 0x28
 800096c:	f000 fbc9 	bl	8001102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000970:	2028      	movs	r0, #40	; 0x28
 8000972:	f000 fbe2 	bl	800113a <HAL_NVIC_EnableIRQ>

}
 8000976:	bf00      	nop
 8000978:	3720      	adds	r7, #32
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000
 8000984:	40010800 	.word	0x40010800
 8000988:	40011000 	.word	0x40011000
 800098c:	10110000 	.word	0x10110000

08000990 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009a0:	d101      	bne.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 80009a2:	f000 f80b 	bl	80009bc <SCH_Update>
	}
	timeRun();
 80009a6:	f000 f84b 	bl	8000a40 <timeRun>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b6:	b672      	cpsid	i
}
 80009b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ba:	e7fe      	b.n	80009ba <Error_Handler+0x8>

080009bc <SCH_Update>:
        tasks[i].period = 0;
        tasks[i].flag = 0;
    }
}

void SCH_Update(void) {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return;
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <SCH_Update+0x48>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d018      	beq.n	80009fa <SCH_Update+0x3e>
	if (tasks[0].delay > 0) {
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <SCH_Update+0x48>)
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00c      	beq.n	80009ea <SCH_Update+0x2e>
		if (tasks[0].delay > TIMER_TICK) {
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <SCH_Update+0x48>)
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	2b0a      	cmp	r3, #10
 80009d6:	d905      	bls.n	80009e4 <SCH_Update+0x28>
			tasks[0].delay -= TIMER_TICK;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <SCH_Update+0x48>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	3b0a      	subs	r3, #10
 80009de:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <SCH_Update+0x48>)
 80009e0:	6093      	str	r3, [r2, #8]
 80009e2:	e002      	b.n	80009ea <SCH_Update+0x2e>
		}
		else {
			tasks[0].delay = 0;
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <SCH_Update+0x48>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
		}
	}
	if (tasks[0].delay == 0) {
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <SCH_Update+0x48>)
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d104      	bne.n	80009fc <SCH_Update+0x40>
		tasks[0].flag = 1;
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SCH_Update+0x48>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	741a      	strb	r2, [r3, #16]
 80009f8:	e000      	b.n	80009fc <SCH_Update+0x40>
    if (tasks[0].functionPointer == 0) return;
 80009fa:	bf00      	nop
	}
}
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000200 	.word	0x20000200

08000a08 <setTimer>:

int timer_counter=0;
int timer_flag=0;

void setTimer(int duration)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	timer_counter = duration/timer_cycle;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <setTimer+0x2c>)
 8000a14:	fb82 1203 	smull	r1, r2, r2, r3
 8000a18:	1092      	asrs	r2, r2, #2
 8000a1a:	17db      	asrs	r3, r3, #31
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <setTimer+0x30>)
 8000a20:	6013      	str	r3, [r2, #0]
	timer_flag = 0;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <setTimer+0x34>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	66666667 	.word	0x66666667
 8000a38:	20000090 	.word	0x20000090
 8000a3c:	20000094 	.word	0x20000094

08000a40 <timeRun>:

void timeRun()
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	if(timer_counter > 0){
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <timeRun+0x2c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	dd0b      	ble.n	8000a64 <timeRun+0x24>
		timer_counter--;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <timeRun+0x2c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <timeRun+0x2c>)
 8000a54:	6013      	str	r3, [r2, #0]
		if(timer_counter <= 0){
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <timeRun+0x2c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	dc02      	bgt.n	8000a64 <timeRun+0x24>
			timer_flag = 1;
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <timeRun+0x30>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000090 	.word	0x20000090
 8000a70:	20000094 	.word	0x20000094

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6193      	str	r3, [r2, #24]
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <HAL_MspInit+0x60>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_MspInit+0x60>)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40010000 	.word	0x40010000

08000ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a1d      	ldr	r2, [pc, #116]	; (8000b68 <HAL_I2C_MspInit+0x90>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d132      	bne.n	8000b5e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <HAL_I2C_MspInit+0x94>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a1b      	ldr	r2, [pc, #108]	; (8000b6c <HAL_I2C_MspInit+0x94>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <HAL_I2C_MspInit+0x94>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b16:	2312      	movs	r3, #18
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4812      	ldr	r0, [pc, #72]	; (8000b70 <HAL_I2C_MspInit+0x98>)
 8000b26:	f000 fbd5 	bl	80012d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_I2C_MspInit+0x9c>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b40:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <HAL_I2C_MspInit+0x9c>)
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_I2C_MspInit+0x94>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_I2C_MspInit+0x94>)
 8000b4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b50:	61d3      	str	r3, [r2, #28]
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_I2C_MspInit+0x94>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40005400 	.word	0x40005400
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010c00 	.word	0x40010c00
 8000b74:	40010000 	.word	0x40010000

08000b78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b88:	d113      	bne.n	8000bb2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_TIM_Base_MspInit+0x44>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <HAL_TIM_Base_MspInit+0x44>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_TIM_Base_MspInit+0x44>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	201c      	movs	r0, #28
 8000ba8:	f000 faab 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bac:	201c      	movs	r0, #28
 8000bae:	f000 fac4 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a3f      	ldr	r2, [pc, #252]	; (8000cd8 <HAL_UART_MspInit+0x118>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d13a      	bne.n	8000c56 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be0:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <HAL_UART_MspInit+0x11c>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a3d      	ldr	r2, [pc, #244]	; (8000cdc <HAL_UART_MspInit+0x11c>)
 8000be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b3b      	ldr	r3, [pc, #236]	; (8000cdc <HAL_UART_MspInit+0x11c>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <HAL_UART_MspInit+0x11c>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a37      	ldr	r2, [pc, #220]	; (8000cdc <HAL_UART_MspInit+0x11c>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <HAL_UART_MspInit+0x11c>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0318 	add.w	r3, r7, #24
 8000c22:	4619      	mov	r1, r3
 8000c24:	482e      	ldr	r0, [pc, #184]	; (8000ce0 <HAL_UART_MspInit+0x120>)
 8000c26:	f000 fb55 	bl	80012d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 0318 	add.w	r3, r7, #24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4828      	ldr	r0, [pc, #160]	; (8000ce0 <HAL_UART_MspInit+0x120>)
 8000c40:	f000 fb48 	bl	80012d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2025      	movs	r0, #37	; 0x25
 8000c4a:	f000 fa5a 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c4e:	2025      	movs	r0, #37	; 0x25
 8000c50:	f000 fa73 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c54:	e03c      	b.n	8000cd0 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <HAL_UART_MspInit+0x124>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d137      	bne.n	8000cd0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <HAL_UART_MspInit+0x11c>)
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	4a1d      	ldr	r2, [pc, #116]	; (8000cdc <HAL_UART_MspInit+0x11c>)
 8000c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6a:	61d3      	str	r3, [r2, #28]
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_UART_MspInit+0x11c>)
 8000c6e:	69db      	ldr	r3, [r3, #28]
 8000c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_UART_MspInit+0x11c>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <HAL_UART_MspInit+0x11c>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_UART_MspInit+0x11c>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c90:	2304      	movs	r3, #4
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480f      	ldr	r0, [pc, #60]	; (8000ce0 <HAL_UART_MspInit+0x120>)
 8000ca4:	f000 fb16 	bl	80012d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0318 	add.w	r3, r7, #24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <HAL_UART_MspInit+0x120>)
 8000cbc:	f000 fb0a 	bl	80012d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2026      	movs	r0, #38	; 0x26
 8000cc6:	f000 fa1c 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cca:	2026      	movs	r0, #38	; 0x26
 8000ccc:	f000 fa35 	bl	800113a <HAL_NVIC_EnableIRQ>
}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	; 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010800 	.word	0x40010800
 8000ce4:	40004400 	.word	0x40004400

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2e:	f000 f8d1 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <TIM2_IRQHandler+0x10>)
 8000d3e:	f002 f96b 	bl	8003018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000170 	.word	0x20000170

08000d4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <USART1_IRQHandler+0x10>)
 8000d52:	f002 fd8d 	bl	8003870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000128 	.word	0x20000128

08000d60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <USART2_IRQHandler+0x10>)
 8000d66:	f002 fd83 	bl	8003870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200001b8 	.word	0x200001b8

08000d74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d7c:	f000 fc46 	bl	800160c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f003 fa9a 	bl	80042ec <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20005000 	.word	0x20005000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	20000098 	.word	0x20000098
 8000dec:	200003a8 	.word	0x200003a8

08000df0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dfc:	f7ff fff8 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480b      	ldr	r0, [pc, #44]	; (8000e30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e02:	490c      	ldr	r1, [pc, #48]	; (8000e34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e04:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e18:	4c09      	ldr	r4, [pc, #36]	; (8000e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e26:	f003 fa67 	bl	80042f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e2a:	f7ff fbe1 	bl	80005f0 <main>
  bx lr
 8000e2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e38:	08004e8c 	.word	0x08004e8c
  ldr r2, =_sbss
 8000e3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e40:	200003a4 	.word	0x200003a4

08000e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_2_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_Init+0x28>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_Init+0x28>)
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 f947 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f000 f808 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fe06 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40022000 	.word	0x40022000

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x54>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x58>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f95f 	bl	8001156 <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 f927 	bl	8001102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_InitTick+0x5c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_IncTick+0x1c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000390 	.word	0x20000390

08000ef8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <HAL_GetTick+0x10>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000390 	.word	0x20000390

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff fff0 	bl	8000ef8 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffe0 	bl	8000ef8 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db0b      	blt.n	8000fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	4906      	ldr	r1, [pc, #24]	; (8000fec <__NVIC_EnableIRQ+0x34>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff90 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff2d 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff42 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff90 	bl	8001044 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5f 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff35 	bl	8000fb8 <__NVIC_EnableIRQ>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffa2 	bl	80010a8 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800116e:	b480      	push	{r7}
 8001170:	b085      	sub	sp, #20
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d008      	beq.n	8001198 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2204      	movs	r2, #4
 800118a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e020      	b.n	80011da <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 020e 	bic.w	r2, r2, #14
 80011a6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c0:	2101      	movs	r1, #1
 80011c2:	fa01 f202 	lsl.w	r2, r1, r2
 80011c6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d005      	beq.n	8001208 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2204      	movs	r2, #4
 8001200:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
 8001206:	e051      	b.n	80012ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 020e 	bic.w	r2, r2, #14
 8001216:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0201 	bic.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a22      	ldr	r2, [pc, #136]	; (80012b8 <HAL_DMA_Abort_IT+0xd4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d029      	beq.n	8001286 <HAL_DMA_Abort_IT+0xa2>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a21      	ldr	r2, [pc, #132]	; (80012bc <HAL_DMA_Abort_IT+0xd8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d022      	beq.n	8001282 <HAL_DMA_Abort_IT+0x9e>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <HAL_DMA_Abort_IT+0xdc>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d01a      	beq.n	800127c <HAL_DMA_Abort_IT+0x98>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <HAL_DMA_Abort_IT+0xe0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d012      	beq.n	8001276 <HAL_DMA_Abort_IT+0x92>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <HAL_DMA_Abort_IT+0xe4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00a      	beq.n	8001270 <HAL_DMA_Abort_IT+0x8c>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <HAL_DMA_Abort_IT+0xe8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d102      	bne.n	800126a <HAL_DMA_Abort_IT+0x86>
 8001264:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001268:	e00e      	b.n	8001288 <HAL_DMA_Abort_IT+0xa4>
 800126a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800126e:	e00b      	b.n	8001288 <HAL_DMA_Abort_IT+0xa4>
 8001270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001274:	e008      	b.n	8001288 <HAL_DMA_Abort_IT+0xa4>
 8001276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127a:	e005      	b.n	8001288 <HAL_DMA_Abort_IT+0xa4>
 800127c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001280:	e002      	b.n	8001288 <HAL_DMA_Abort_IT+0xa4>
 8001282:	2310      	movs	r3, #16
 8001284:	e000      	b.n	8001288 <HAL_DMA_Abort_IT+0xa4>
 8001286:	2301      	movs	r3, #1
 8001288:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <HAL_DMA_Abort_IT+0xec>)
 800128a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	4798      	blx	r3
    } 
  }
  return status;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40020008 	.word	0x40020008
 80012bc:	4002001c 	.word	0x4002001c
 80012c0:	40020030 	.word	0x40020030
 80012c4:	40020044 	.word	0x40020044
 80012c8:	40020058 	.word	0x40020058
 80012cc:	4002006c 	.word	0x4002006c
 80012d0:	40020000 	.word	0x40020000

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b08b      	sub	sp, #44	; 0x2c
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e6:	e169      	b.n	80015bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012e8:	2201      	movs	r2, #1
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 8158 	bne.w	80015b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4a9a      	ldr	r2, [pc, #616]	; (8001574 <HAL_GPIO_Init+0x2a0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d05e      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001310:	4a98      	ldr	r2, [pc, #608]	; (8001574 <HAL_GPIO_Init+0x2a0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d875      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001316:	4a98      	ldr	r2, [pc, #608]	; (8001578 <HAL_GPIO_Init+0x2a4>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d058      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 800131c:	4a96      	ldr	r2, [pc, #600]	; (8001578 <HAL_GPIO_Init+0x2a4>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d86f      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001322:	4a96      	ldr	r2, [pc, #600]	; (800157c <HAL_GPIO_Init+0x2a8>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d052      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001328:	4a94      	ldr	r2, [pc, #592]	; (800157c <HAL_GPIO_Init+0x2a8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d869      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800132e:	4a94      	ldr	r2, [pc, #592]	; (8001580 <HAL_GPIO_Init+0x2ac>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d04c      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001334:	4a92      	ldr	r2, [pc, #584]	; (8001580 <HAL_GPIO_Init+0x2ac>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d863      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800133a:	4a92      	ldr	r2, [pc, #584]	; (8001584 <HAL_GPIO_Init+0x2b0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d046      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001340:	4a90      	ldr	r2, [pc, #576]	; (8001584 <HAL_GPIO_Init+0x2b0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d85d      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001346:	2b12      	cmp	r3, #18
 8001348:	d82a      	bhi.n	80013a0 <HAL_GPIO_Init+0xcc>
 800134a:	2b12      	cmp	r3, #18
 800134c:	d859      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800134e:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <HAL_GPIO_Init+0x80>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	080013cf 	.word	0x080013cf
 8001358:	080013a9 	.word	0x080013a9
 800135c:	080013bb 	.word	0x080013bb
 8001360:	080013fd 	.word	0x080013fd
 8001364:	08001403 	.word	0x08001403
 8001368:	08001403 	.word	0x08001403
 800136c:	08001403 	.word	0x08001403
 8001370:	08001403 	.word	0x08001403
 8001374:	08001403 	.word	0x08001403
 8001378:	08001403 	.word	0x08001403
 800137c:	08001403 	.word	0x08001403
 8001380:	08001403 	.word	0x08001403
 8001384:	08001403 	.word	0x08001403
 8001388:	08001403 	.word	0x08001403
 800138c:	08001403 	.word	0x08001403
 8001390:	08001403 	.word	0x08001403
 8001394:	08001403 	.word	0x08001403
 8001398:	080013b1 	.word	0x080013b1
 800139c:	080013c5 	.word	0x080013c5
 80013a0:	4a79      	ldr	r2, [pc, #484]	; (8001588 <HAL_GPIO_Init+0x2b4>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d013      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013a6:	e02c      	b.n	8001402 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	623b      	str	r3, [r7, #32]
          break;
 80013ae:	e029      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	3304      	adds	r3, #4
 80013b6:	623b      	str	r3, [r7, #32]
          break;
 80013b8:	e024      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	3308      	adds	r3, #8
 80013c0:	623b      	str	r3, [r7, #32]
          break;
 80013c2:	e01f      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	330c      	adds	r3, #12
 80013ca:	623b      	str	r3, [r7, #32]
          break;
 80013cc:	e01a      	b.n	8001404 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013d6:	2304      	movs	r3, #4
 80013d8:	623b      	str	r3, [r7, #32]
          break;
 80013da:	e013      	b.n	8001404 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d105      	bne.n	80013f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e4:	2308      	movs	r3, #8
 80013e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	611a      	str	r2, [r3, #16]
          break;
 80013ee:	e009      	b.n	8001404 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013f0:	2308      	movs	r3, #8
 80013f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	615a      	str	r2, [r3, #20]
          break;
 80013fa:	e003      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
          break;
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x130>
          break;
 8001402:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	2bff      	cmp	r3, #255	; 0xff
 8001408:	d801      	bhi.n	800140e <HAL_GPIO_Init+0x13a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	e001      	b.n	8001412 <HAL_GPIO_Init+0x13e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3304      	adds	r3, #4
 8001412:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2bff      	cmp	r3, #255	; 0xff
 8001418:	d802      	bhi.n	8001420 <HAL_GPIO_Init+0x14c>
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	e002      	b.n	8001426 <HAL_GPIO_Init+0x152>
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	3b08      	subs	r3, #8
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	210f      	movs	r1, #15
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	401a      	ands	r2, r3
 8001438:	6a39      	ldr	r1, [r7, #32]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	431a      	orrs	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80b1 	beq.w	80015b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001454:	4b4d      	ldr	r3, [pc, #308]	; (800158c <HAL_GPIO_Init+0x2b8>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a4c      	ldr	r2, [pc, #304]	; (800158c <HAL_GPIO_Init+0x2b8>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b4a      	ldr	r3, [pc, #296]	; (800158c <HAL_GPIO_Init+0x2b8>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800146c:	4a48      	ldr	r2, [pc, #288]	; (8001590 <HAL_GPIO_Init+0x2bc>)
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	3302      	adds	r3, #2
 8001474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001478:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a40      	ldr	r2, [pc, #256]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d013      	beq.n	80014c0 <HAL_GPIO_Init+0x1ec>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a3f      	ldr	r2, [pc, #252]	; (8001598 <HAL_GPIO_Init+0x2c4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d00d      	beq.n	80014bc <HAL_GPIO_Init+0x1e8>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a3e      	ldr	r2, [pc, #248]	; (800159c <HAL_GPIO_Init+0x2c8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d007      	beq.n	80014b8 <HAL_GPIO_Init+0x1e4>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a3d      	ldr	r2, [pc, #244]	; (80015a0 <HAL_GPIO_Init+0x2cc>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d101      	bne.n	80014b4 <HAL_GPIO_Init+0x1e0>
 80014b0:	2303      	movs	r3, #3
 80014b2:	e006      	b.n	80014c2 <HAL_GPIO_Init+0x1ee>
 80014b4:	2304      	movs	r3, #4
 80014b6:	e004      	b.n	80014c2 <HAL_GPIO_Init+0x1ee>
 80014b8:	2302      	movs	r3, #2
 80014ba:	e002      	b.n	80014c2 <HAL_GPIO_Init+0x1ee>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <HAL_GPIO_Init+0x1ee>
 80014c0:	2300      	movs	r3, #0
 80014c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c4:	f002 0203 	and.w	r2, r2, #3
 80014c8:	0092      	lsls	r2, r2, #2
 80014ca:	4093      	lsls	r3, r2
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014d2:	492f      	ldr	r1, [pc, #188]	; (8001590 <HAL_GPIO_Init+0x2bc>)
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3302      	adds	r3, #2
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	492c      	ldr	r1, [pc, #176]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	608b      	str	r3, [r1, #8]
 80014f8:	e006      	b.n	8001508 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	43db      	mvns	r3, r3
 8001502:	4928      	ldr	r1, [pc, #160]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001504:	4013      	ands	r3, r2
 8001506:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	4922      	ldr	r1, [pc, #136]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	60cb      	str	r3, [r1, #12]
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	43db      	mvns	r3, r3
 800152a:	491e      	ldr	r1, [pc, #120]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 800152c:	4013      	ands	r3, r2
 800152e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	4918      	ldr	r1, [pc, #96]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	43db      	mvns	r3, r3
 8001552:	4914      	ldr	r1, [pc, #80]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001554:	4013      	ands	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d021      	beq.n	80015a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	490e      	ldr	r1, [pc, #56]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
 8001570:	e021      	b.n	80015b6 <HAL_GPIO_Init+0x2e2>
 8001572:	bf00      	nop
 8001574:	10320000 	.word	0x10320000
 8001578:	10310000 	.word	0x10310000
 800157c:	10220000 	.word	0x10220000
 8001580:	10210000 	.word	0x10210000
 8001584:	10120000 	.word	0x10120000
 8001588:	10110000 	.word	0x10110000
 800158c:	40021000 	.word	0x40021000
 8001590:	40010000 	.word	0x40010000
 8001594:	40010800 	.word	0x40010800
 8001598:	40010c00 	.word	0x40010c00
 800159c:	40011000 	.word	0x40011000
 80015a0:	40011400 	.word	0x40011400
 80015a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_GPIO_Init+0x304>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	4909      	ldr	r1, [pc, #36]	; (80015d8 <HAL_GPIO_Init+0x304>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	3301      	adds	r3, #1
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	fa22 f303 	lsr.w	r3, r2, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f47f ae8e 	bne.w	80012e8 <HAL_GPIO_Init+0x14>
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	372c      	adds	r7, #44	; 0x2c
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	40010400 	.word	0x40010400

080015dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
 80015e8:	4613      	mov	r3, r2
 80015ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ec:	787b      	ldrb	r3, [r7, #1]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015f8:	e003      	b.n	8001602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015fa:	887b      	ldrh	r3, [r7, #2]
 80015fc:	041a      	lsls	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	611a      	str	r2, [r3, #16]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d006      	beq.n	8001630 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f806 	bl	800163c <HAL_GPIO_EXTI_Callback>
  }
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e12b      	b.n	80018ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d106      	bne.n	800167c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fa2e 	bl	8000ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2224      	movs	r2, #36	; 0x24
 8001680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0201 	bic.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016b4:	f001 fbc8 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 80016b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a81      	ldr	r2, [pc, #516]	; (80018c4 <HAL_I2C_Init+0x274>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d807      	bhi.n	80016d4 <HAL_I2C_Init+0x84>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4a80      	ldr	r2, [pc, #512]	; (80018c8 <HAL_I2C_Init+0x278>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	bf94      	ite	ls
 80016cc:	2301      	movls	r3, #1
 80016ce:	2300      	movhi	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	e006      	b.n	80016e2 <HAL_I2C_Init+0x92>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4a7d      	ldr	r2, [pc, #500]	; (80018cc <HAL_I2C_Init+0x27c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	bf94      	ite	ls
 80016dc:	2301      	movls	r3, #1
 80016de:	2300      	movhi	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e0e7      	b.n	80018ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4a78      	ldr	r2, [pc, #480]	; (80018d0 <HAL_I2C_Init+0x280>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0c9b      	lsrs	r3, r3, #18
 80016f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	430a      	orrs	r2, r1
 8001708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a6a      	ldr	r2, [pc, #424]	; (80018c4 <HAL_I2C_Init+0x274>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d802      	bhi.n	8001724 <HAL_I2C_Init+0xd4>
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3301      	adds	r3, #1
 8001722:	e009      	b.n	8001738 <HAL_I2C_Init+0xe8>
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	4a69      	ldr	r2, [pc, #420]	; (80018d4 <HAL_I2C_Init+0x284>)
 8001730:	fba2 2303 	umull	r2, r3, r2, r3
 8001734:	099b      	lsrs	r3, r3, #6
 8001736:	3301      	adds	r3, #1
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	430b      	orrs	r3, r1
 800173e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800174a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	495c      	ldr	r1, [pc, #368]	; (80018c4 <HAL_I2C_Init+0x274>)
 8001754:	428b      	cmp	r3, r1
 8001756:	d819      	bhi.n	800178c <HAL_I2C_Init+0x13c>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e59      	subs	r1, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fbb1 f3f3 	udiv	r3, r1, r3
 8001766:	1c59      	adds	r1, r3, #1
 8001768:	f640 73fc 	movw	r3, #4092	; 0xffc
 800176c:	400b      	ands	r3, r1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00a      	beq.n	8001788 <HAL_I2C_Init+0x138>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1e59      	subs	r1, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001780:	3301      	adds	r3, #1
 8001782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001786:	e051      	b.n	800182c <HAL_I2C_Init+0x1dc>
 8001788:	2304      	movs	r3, #4
 800178a:	e04f      	b.n	800182c <HAL_I2C_Init+0x1dc>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d111      	bne.n	80017b8 <HAL_I2C_Init+0x168>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1e58      	subs	r0, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6859      	ldr	r1, [r3, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	440b      	add	r3, r1
 80017a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a6:	3301      	adds	r3, #1
 80017a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	e012      	b.n	80017de <HAL_I2C_Init+0x18e>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1e58      	subs	r0, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6859      	ldr	r1, [r3, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	0099      	lsls	r1, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_I2C_Init+0x196>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e022      	b.n	800182c <HAL_I2C_Init+0x1dc>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10e      	bne.n	800180c <HAL_I2C_Init+0x1bc>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1e58      	subs	r0, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6859      	ldr	r1, [r3, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	440b      	add	r3, r1
 80017fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001800:	3301      	adds	r3, #1
 8001802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800180a:	e00f      	b.n	800182c <HAL_I2C_Init+0x1dc>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1e58      	subs	r0, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6859      	ldr	r1, [r3, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	0099      	lsls	r1, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001822:	3301      	adds	r3, #1
 8001824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	6809      	ldr	r1, [r1, #0]
 8001830:	4313      	orrs	r3, r2
 8001832:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69da      	ldr	r2, [r3, #28]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800185a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6911      	ldr	r1, [r2, #16]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68d2      	ldr	r2, [r2, #12]
 8001866:	4311      	orrs	r1, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	430b      	orrs	r3, r1
 800186e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2220      	movs	r2, #32
 80018a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	000186a0 	.word	0x000186a0
 80018c8:	001e847f 	.word	0x001e847f
 80018cc:	003d08ff 	.word	0x003d08ff
 80018d0:	431bde83 	.word	0x431bde83
 80018d4:	10624dd3 	.word	0x10624dd3

080018d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	461a      	mov	r2, r3
 80018e4:	460b      	mov	r3, r1
 80018e6:	817b      	strh	r3, [r7, #10]
 80018e8:	4613      	mov	r3, r2
 80018ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff fb04 	bl	8000ef8 <HAL_GetTick>
 80018f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	f040 80e0 	bne.w	8001ac0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2319      	movs	r3, #25
 8001906:	2201      	movs	r2, #1
 8001908:	4970      	ldr	r1, [pc, #448]	; (8001acc <HAL_I2C_Master_Transmit+0x1f4>)
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 fc9e 	bl	800224c <I2C_WaitOnFlagUntilTimeout>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001916:	2302      	movs	r3, #2
 8001918:	e0d3      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_I2C_Master_Transmit+0x50>
 8001924:	2302      	movs	r3, #2
 8001926:	e0cc      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b01      	cmp	r3, #1
 800193c:	d007      	beq.n	800194e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0201 	orr.w	r2, r2, #1
 800194c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2221      	movs	r2, #33	; 0x21
 8001962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2210      	movs	r2, #16
 800196a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	893a      	ldrh	r2, [r7, #8]
 800197e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4a50      	ldr	r2, [pc, #320]	; (8001ad0 <HAL_I2C_Master_Transmit+0x1f8>)
 800198e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001990:	8979      	ldrh	r1, [r7, #10]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	6a3a      	ldr	r2, [r7, #32]
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 fb08 	bl	8001fac <I2C_MasterRequestWrite>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e08d      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019bc:	e066      	b.n	8001a8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	6a39      	ldr	r1, [r7, #32]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 fd5c 	bl	8002480 <I2C_WaitOnTXEFlagUntilTimeout>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00d      	beq.n	80019ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d107      	bne.n	80019e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e06b      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	781a      	ldrb	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d11b      	bne.n	8001a60 <HAL_I2C_Master_Transmit+0x188>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d017      	beq.n	8001a60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	6a39      	ldr	r1, [r7, #32]
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 fd53 	bl	8002510 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00d      	beq.n	8001a8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d107      	bne.n	8001a88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e01a      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d194      	bne.n	80019be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e000      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ac0:	2302      	movs	r3, #2
  }
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	00100002 	.word	0x00100002
 8001ad0:	ffff0000 	.word	0xffff0000

08001ad4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	; 0x30
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	817b      	strh	r3, [r7, #10]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff fa04 	bl	8000ef8 <HAL_GetTick>
 8001af0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	f040 824b 	bne.w	8001f96 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2319      	movs	r3, #25
 8001b06:	2201      	movs	r2, #1
 8001b08:	497f      	ldr	r1, [pc, #508]	; (8001d08 <HAL_I2C_Master_Receive+0x234>)
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 fb9e 	bl	800224c <I2C_WaitOnFlagUntilTimeout>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001b16:	2302      	movs	r3, #2
 8001b18:	e23e      	b.n	8001f98 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_I2C_Master_Receive+0x54>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e237      	b.n	8001f98 <HAL_I2C_Master_Receive+0x4c4>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d007      	beq.n	8001b4e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0201 	orr.w	r2, r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2222      	movs	r2, #34	; 0x22
 8001b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2210      	movs	r2, #16
 8001b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	893a      	ldrh	r2, [r7, #8]
 8001b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4a5f      	ldr	r2, [pc, #380]	; (8001d0c <HAL_I2C_Master_Receive+0x238>)
 8001b8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b90:	8979      	ldrh	r1, [r7, #10]
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 fa8a 	bl	80020b0 <I2C_MasterRequestRead>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e1f8      	b.n	8001f98 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d113      	bne.n	8001bd6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	e1cc      	b.n	8001f70 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d11e      	bne.n	8001c1c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bee:	b672      	cpsid	i
}
 8001bf0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c18:	b662      	cpsie	i
}
 8001c1a:	e035      	b.n	8001c88 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d11e      	bne.n	8001c62 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
}
 8001c36:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c5e:	b662      	cpsie	i
}
 8001c60:	e012      	b.n	8001c88 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001c88:	e172      	b.n	8001f70 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	f200 811f 	bhi.w	8001ed2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d123      	bne.n	8001ce4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 fc7d 	bl	80025a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e173      	b.n	8001f98 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ce2:	e145      	b.n	8001f70 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d152      	bne.n	8001d92 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4906      	ldr	r1, [pc, #24]	; (8001d10 <HAL_I2C_Master_Receive+0x23c>)
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 faa8 	bl	800224c <I2C_WaitOnFlagUntilTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e148      	b.n	8001f98 <HAL_I2C_Master_Receive+0x4c4>
 8001d06:	bf00      	nop
 8001d08:	00100002 	.word	0x00100002
 8001d0c:	ffff0000 	.word	0xffff0000
 8001d10:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001d14:	b672      	cpsid	i
}
 8001d16:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d5a:	b662      	cpsie	i
}
 8001d5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d90:	e0ee      	b.n	8001f70 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4981      	ldr	r1, [pc, #516]	; (8001fa0 <HAL_I2C_Master_Receive+0x4cc>)
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 fa55 	bl	800224c <I2C_WaitOnFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0f5      	b.n	8001f98 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbc:	b672      	cpsid	i
}
 8001dbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001df2:	4b6c      	ldr	r3, [pc, #432]	; (8001fa4 <HAL_I2C_Master_Receive+0x4d0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	08db      	lsrs	r3, r3, #3
 8001df8:	4a6b      	ldr	r2, [pc, #428]	; (8001fa8 <HAL_I2C_Master_Receive+0x4d4>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	0a1a      	lsrs	r2, r3, #8
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00da      	lsls	r2, r3, #3
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d118      	bne.n	8001e4a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f043 0220 	orr.w	r2, r3, #32
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001e3a:	b662      	cpsie	i
}
 8001e3c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e0a6      	b.n	8001f98 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d1d9      	bne.n	8001e0c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e9a:	b662      	cpsie	i
}
 8001e9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ed0:	e04e      	b.n	8001f70 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 fb62 	bl	80025a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e058      	b.n	8001f98 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d124      	bne.n	8001f70 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d107      	bne.n	8001f3e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f47f ae88 	bne.w	8001c8a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3728      	adds	r7, #40	; 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	00010004 	.word	0x00010004
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	14f8b589 	.word	0x14f8b589

08001fac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d006      	beq.n	8001fd6 <I2C_MasterRequestWrite+0x2a>
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d003      	beq.n	8001fd6 <I2C_MasterRequestWrite+0x2a>
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fd4:	d108      	bne.n	8001fe8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e00b      	b.n	8002000 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	2b12      	cmp	r3, #18
 8001fee:	d107      	bne.n	8002000 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ffe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f91d 	bl	800224c <I2C_WaitOnFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002026:	d103      	bne.n	8002030 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e035      	b.n	80020a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800203c:	d108      	bne.n	8002050 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800203e:	897b      	ldrh	r3, [r7, #10]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800204c:	611a      	str	r2, [r3, #16]
 800204e:	e01b      	b.n	8002088 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002050:	897b      	ldrh	r3, [r7, #10]
 8002052:	11db      	asrs	r3, r3, #7
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f003 0306 	and.w	r3, r3, #6
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f063 030f 	orn	r3, r3, #15
 8002060:	b2da      	uxtb	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	490e      	ldr	r1, [pc, #56]	; (80020a8 <I2C_MasterRequestWrite+0xfc>)
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f966 	bl	8002340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e010      	b.n	80020a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800207e:	897b      	ldrh	r3, [r7, #10]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4907      	ldr	r1, [pc, #28]	; (80020ac <I2C_MasterRequestWrite+0x100>)
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f956 	bl	8002340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	00010008 	.word	0x00010008
 80020ac:	00010002 	.word	0x00010002

080020b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	460b      	mov	r3, r1
 80020be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d006      	beq.n	80020ea <I2C_MasterRequestRead+0x3a>
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d003      	beq.n	80020ea <I2C_MasterRequestRead+0x3a>
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020e8:	d108      	bne.n	80020fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e00b      	b.n	8002114 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	2b11      	cmp	r3, #17
 8002102:	d107      	bne.n	8002114 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002112:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 f893 	bl	800224c <I2C_WaitOnFlagUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00d      	beq.n	8002148 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800213a:	d103      	bne.n	8002144 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002142:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e079      	b.n	800223c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002150:	d108      	bne.n	8002164 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002152:	897b      	ldrh	r3, [r7, #10]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	b2da      	uxtb	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	611a      	str	r2, [r3, #16]
 8002162:	e05f      	b.n	8002224 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002164:	897b      	ldrh	r3, [r7, #10]
 8002166:	11db      	asrs	r3, r3, #7
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f003 0306 	and.w	r3, r3, #6
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f063 030f 	orn	r3, r3, #15
 8002174:	b2da      	uxtb	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4930      	ldr	r1, [pc, #192]	; (8002244 <I2C_MasterRequestRead+0x194>)
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f8dc 	bl	8002340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e054      	b.n	800223c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002192:	897b      	ldrh	r3, [r7, #10]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4929      	ldr	r1, [pc, #164]	; (8002248 <I2C_MasterRequestRead+0x198>)
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f8cc 	bl	8002340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e044      	b.n	800223c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 f831 	bl	800224c <I2C_WaitOnFlagUntilTimeout>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00d      	beq.n	800220c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021fe:	d103      	bne.n	8002208 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002206:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e017      	b.n	800223c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800220c:	897b      	ldrh	r3, [r7, #10]
 800220e:	11db      	asrs	r3, r3, #7
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f003 0306 	and.w	r3, r3, #6
 8002216:	b2db      	uxtb	r3, r3
 8002218:	f063 030e 	orn	r3, r3, #14
 800221c:	b2da      	uxtb	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4907      	ldr	r1, [pc, #28]	; (8002248 <I2C_MasterRequestRead+0x198>)
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f888 	bl	8002340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	00010008 	.word	0x00010008
 8002248:	00010002 	.word	0x00010002

0800224c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	603b      	str	r3, [r7, #0]
 8002258:	4613      	mov	r3, r2
 800225a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800225c:	e048      	b.n	80022f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d044      	beq.n	80022f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002266:	f7fe fe47 	bl	8000ef8 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d302      	bcc.n	800227c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d139      	bne.n	80022f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	0c1b      	lsrs	r3, r3, #16
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d10d      	bne.n	80022a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	43da      	mvns	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	4013      	ands	r3, r2
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	e00c      	b.n	80022bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	43da      	mvns	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	4013      	ands	r3, r2
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d116      	bne.n	80022f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f043 0220 	orr.w	r2, r3, #32
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e023      	b.n	8002338 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	0c1b      	lsrs	r3, r3, #16
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d10d      	bne.n	8002316 <I2C_WaitOnFlagUntilTimeout+0xca>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	43da      	mvns	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4013      	ands	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	e00c      	b.n	8002330 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	43da      	mvns	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	4013      	ands	r3, r2
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf0c      	ite	eq
 8002328:	2301      	moveq	r3, #1
 800232a:	2300      	movne	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	429a      	cmp	r2, r3
 8002334:	d093      	beq.n	800225e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800234e:	e071      	b.n	8002434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235e:	d123      	bne.n	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002378:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f043 0204 	orr.w	r2, r3, #4
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e067      	b.n	8002478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ae:	d041      	beq.n	8002434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b0:	f7fe fda2 	bl	8000ef8 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d302      	bcc.n	80023c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d136      	bne.n	8002434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d10c      	bne.n	80023ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4013      	ands	r3, r2
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	e00b      	b.n	8002402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	43da      	mvns	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	4013      	ands	r3, r2
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf14      	ite	ne
 80023fc:	2301      	movne	r3, #1
 80023fe:	2300      	moveq	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d016      	beq.n	8002434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f043 0220 	orr.w	r2, r3, #32
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e021      	b.n	8002478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	0c1b      	lsrs	r3, r3, #16
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d10c      	bne.n	8002458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	43da      	mvns	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	4013      	ands	r3, r2
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf14      	ite	ne
 8002450:	2301      	movne	r3, #1
 8002452:	2300      	moveq	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	e00b      	b.n	8002470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4013      	ands	r3, r2
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	bf14      	ite	ne
 800246a:	2301      	movne	r3, #1
 800246c:	2300      	moveq	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	f47f af6d 	bne.w	8002350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800248c:	e034      	b.n	80024f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f8e3 	bl	800265a <I2C_IsAcknowledgeFailed>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e034      	b.n	8002508 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a4:	d028      	beq.n	80024f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a6:	f7fe fd27 	bl	8000ef8 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d302      	bcc.n	80024bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d11d      	bne.n	80024f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c6:	2b80      	cmp	r3, #128	; 0x80
 80024c8:	d016      	beq.n	80024f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e007      	b.n	8002508 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002502:	2b80      	cmp	r3, #128	; 0x80
 8002504:	d1c3      	bne.n	800248e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800251c:	e034      	b.n	8002588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 f89b 	bl	800265a <I2C_IsAcknowledgeFailed>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e034      	b.n	8002598 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d028      	beq.n	8002588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002536:	f7fe fcdf 	bl	8000ef8 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	429a      	cmp	r2, r3
 8002544:	d302      	bcc.n	800254c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d11d      	bne.n	8002588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b04      	cmp	r3, #4
 8002558:	d016      	beq.n	8002588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	f043 0220 	orr.w	r2, r3, #32
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e007      	b.n	8002598 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b04      	cmp	r3, #4
 8002594:	d1c3      	bne.n	800251e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025ac:	e049      	b.n	8002642 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d119      	bne.n	80025f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0210 	mvn.w	r2, #16
 80025c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e030      	b.n	8002652 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f0:	f7fe fc82 	bl	8000ef8 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d302      	bcc.n	8002606 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d11d      	bne.n	8002642 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002610:	2b40      	cmp	r3, #64	; 0x40
 8002612:	d016      	beq.n	8002642 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f043 0220 	orr.w	r2, r3, #32
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e007      	b.n	8002652 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264c:	2b40      	cmp	r3, #64	; 0x40
 800264e:	d1ae      	bne.n	80025ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002670:	d11b      	bne.n	80026aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800267a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f043 0204 	orr.w	r2, r3, #4
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
	...

080026b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e26c      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8087 	beq.w	80027e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d8:	4b92      	ldr	r3, [pc, #584]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 030c 	and.w	r3, r3, #12
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d00c      	beq.n	80026fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026e4:	4b8f      	ldr	r3, [pc, #572]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d112      	bne.n	8002716 <HAL_RCC_OscConfig+0x5e>
 80026f0:	4b8c      	ldr	r3, [pc, #560]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026fc:	d10b      	bne.n	8002716 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fe:	4b89      	ldr	r3, [pc, #548]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d06c      	beq.n	80027e4 <HAL_RCC_OscConfig+0x12c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d168      	bne.n	80027e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e246      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x76>
 8002720:	4b80      	ldr	r3, [pc, #512]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a7f      	ldr	r2, [pc, #508]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	e02e      	b.n	800278c <HAL_RCC_OscConfig+0xd4>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x98>
 8002736:	4b7b      	ldr	r3, [pc, #492]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a7a      	ldr	r2, [pc, #488]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800273c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b78      	ldr	r3, [pc, #480]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a77      	ldr	r2, [pc, #476]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e01d      	b.n	800278c <HAL_RCC_OscConfig+0xd4>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0xbc>
 800275a:	4b72      	ldr	r3, [pc, #456]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a71      	ldr	r2, [pc, #452]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b6f      	ldr	r3, [pc, #444]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6e      	ldr	r2, [pc, #440]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0xd4>
 8002774:	4b6b      	ldr	r3, [pc, #428]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a6a      	ldr	r2, [pc, #424]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b68      	ldr	r3, [pc, #416]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a67      	ldr	r2, [pc, #412]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fbb0 	bl	8000ef8 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe fbac 	bl	8000ef8 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e1fa      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b5d      	ldr	r3, [pc, #372]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0xe4>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe fb9c 	bl	8000ef8 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe fb98 	bl	8000ef8 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1e6      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	4b53      	ldr	r3, [pc, #332]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x10c>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d063      	beq.n	80028ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027f2:	4b4c      	ldr	r3, [pc, #304]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027fe:	4b49      	ldr	r3, [pc, #292]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b08      	cmp	r3, #8
 8002808:	d11c      	bne.n	8002844 <HAL_RCC_OscConfig+0x18c>
 800280a:	4b46      	ldr	r3, [pc, #280]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d116      	bne.n	8002844 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	4b43      	ldr	r3, [pc, #268]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_RCC_OscConfig+0x176>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e1ba      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282e:	4b3d      	ldr	r3, [pc, #244]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4939      	ldr	r1, [pc, #228]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002842:	e03a      	b.n	80028ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d020      	beq.n	800288e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284c:	4b36      	ldr	r3, [pc, #216]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7fe fb51 	bl	8000ef8 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285a:	f7fe fb4d 	bl	8000ef8 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e19b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	4b2d      	ldr	r3, [pc, #180]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002878:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4927      	ldr	r1, [pc, #156]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]
 800288c:	e015      	b.n	80028ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288e:	4b26      	ldr	r3, [pc, #152]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe fb30 	bl	8000ef8 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289c:	f7fe fb2c 	bl	8000ef8 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e17a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d03a      	beq.n	800293c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d019      	beq.n	8002902 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ce:	4b17      	ldr	r3, [pc, #92]	; (800292c <HAL_RCC_OscConfig+0x274>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d4:	f7fe fb10 	bl	8000ef8 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028dc:	f7fe fb0c 	bl	8000ef8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e15a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028fa:	2001      	movs	r0, #1
 80028fc:	f000 facc 	bl	8002e98 <RCC_Delay>
 8002900:	e01c      	b.n	800293c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_RCC_OscConfig+0x274>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002908:	f7fe faf6 	bl	8000ef8 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290e:	e00f      	b.n	8002930 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002910:	f7fe faf2 	bl	8000ef8 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d908      	bls.n	8002930 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e140      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	42420000 	.word	0x42420000
 800292c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002930:	4b9e      	ldr	r3, [pc, #632]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e9      	bne.n	8002910 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80a6 	beq.w	8002a96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294e:	4b97      	ldr	r3, [pc, #604]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10d      	bne.n	8002976 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	4b94      	ldr	r3, [pc, #592]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	4a93      	ldr	r2, [pc, #588]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002964:	61d3      	str	r3, [r2, #28]
 8002966:	4b91      	ldr	r3, [pc, #580]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002972:	2301      	movs	r3, #1
 8002974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002976:	4b8e      	ldr	r3, [pc, #568]	; (8002bb0 <HAL_RCC_OscConfig+0x4f8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d118      	bne.n	80029b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002982:	4b8b      	ldr	r3, [pc, #556]	; (8002bb0 <HAL_RCC_OscConfig+0x4f8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a8a      	ldr	r2, [pc, #552]	; (8002bb0 <HAL_RCC_OscConfig+0x4f8>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298e:	f7fe fab3 	bl	8000ef8 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002996:	f7fe faaf 	bl	8000ef8 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b64      	cmp	r3, #100	; 0x64
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e0fd      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a8:	4b81      	ldr	r3, [pc, #516]	; (8002bb0 <HAL_RCC_OscConfig+0x4f8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d106      	bne.n	80029ca <HAL_RCC_OscConfig+0x312>
 80029bc:	4b7b      	ldr	r3, [pc, #492]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	4a7a      	ldr	r2, [pc, #488]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6213      	str	r3, [r2, #32]
 80029c8:	e02d      	b.n	8002a26 <HAL_RCC_OscConfig+0x36e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0x334>
 80029d2:	4b76      	ldr	r3, [pc, #472]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4a75      	ldr	r2, [pc, #468]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	6213      	str	r3, [r2, #32]
 80029de:	4b73      	ldr	r3, [pc, #460]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4a72      	ldr	r2, [pc, #456]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 80029e4:	f023 0304 	bic.w	r3, r3, #4
 80029e8:	6213      	str	r3, [r2, #32]
 80029ea:	e01c      	b.n	8002a26 <HAL_RCC_OscConfig+0x36e>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d10c      	bne.n	8002a0e <HAL_RCC_OscConfig+0x356>
 80029f4:	4b6d      	ldr	r3, [pc, #436]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4a6c      	ldr	r2, [pc, #432]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	6213      	str	r3, [r2, #32]
 8002a00:	4b6a      	ldr	r3, [pc, #424]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4a69      	ldr	r2, [pc, #420]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6213      	str	r3, [r2, #32]
 8002a0c:	e00b      	b.n	8002a26 <HAL_RCC_OscConfig+0x36e>
 8002a0e:	4b67      	ldr	r3, [pc, #412]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4a66      	ldr	r2, [pc, #408]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	6213      	str	r3, [r2, #32]
 8002a1a:	4b64      	ldr	r3, [pc, #400]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	4a63      	ldr	r2, [pc, #396]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002a20:	f023 0304 	bic.w	r3, r3, #4
 8002a24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d015      	beq.n	8002a5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2e:	f7fe fa63 	bl	8000ef8 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a34:	e00a      	b.n	8002a4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a36:	f7fe fa5f 	bl	8000ef8 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e0ab      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4c:	4b57      	ldr	r3, [pc, #348]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0ee      	beq.n	8002a36 <HAL_RCC_OscConfig+0x37e>
 8002a58:	e014      	b.n	8002a84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fa4d 	bl	8000ef8 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe fa49 	bl	8000ef8 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e095      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a78:	4b4c      	ldr	r3, [pc, #304]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ee      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d105      	bne.n	8002a96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8a:	4b48      	ldr	r3, [pc, #288]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	4a47      	ldr	r2, [pc, #284]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8081 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa0:	4b42      	ldr	r3, [pc, #264]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d061      	beq.n	8002b70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d146      	bne.n	8002b42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab4:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <HAL_RCC_OscConfig+0x4fc>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aba:	f7fe fa1d 	bl	8000ef8 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe fa19 	bl	8000ef8 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e067      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad4:	4b35      	ldr	r3, [pc, #212]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f0      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae8:	d108      	bne.n	8002afc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aea:	4b30      	ldr	r3, [pc, #192]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	492d      	ldr	r1, [pc, #180]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002afc:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a19      	ldr	r1, [r3, #32]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	4927      	ldr	r1, [pc, #156]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b14:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <HAL_RCC_OscConfig+0x4fc>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fe f9ed 	bl	8000ef8 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b22:	f7fe f9e9 	bl	8000ef8 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e037      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x46a>
 8002b40:	e02f      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b42:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <HAL_RCC_OscConfig+0x4fc>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7fe f9d6 	bl	8000ef8 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b50:	f7fe f9d2 	bl	8000ef8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e020      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x498>
 8002b6e:	e018      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e013      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_OscConfig+0x4f4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d106      	bne.n	8002b9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	42420060 	.word	0x42420060

08002bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0d0      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b6a      	ldr	r3, [pc, #424]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d910      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b67      	ldr	r3, [pc, #412]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0207 	bic.w	r2, r3, #7
 8002be2:	4965      	ldr	r1, [pc, #404]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b63      	ldr	r3, [pc, #396]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0b8      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d020      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c14:	4b59      	ldr	r3, [pc, #356]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4a58      	ldr	r2, [pc, #352]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c2c:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	4a52      	ldr	r2, [pc, #328]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c38:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	494d      	ldr	r1, [pc, #308]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d040      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d115      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e07f      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	4b41      	ldr	r3, [pc, #260]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e073      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c86:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e06b      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c96:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f023 0203 	bic.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4936      	ldr	r1, [pc, #216]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7fe f926 	bl	8000ef8 <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb0:	f7fe f922 	bl	8000ef8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e053      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 020c 	and.w	r2, r3, #12
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d1eb      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d210      	bcs.n	8002d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 0207 	bic.w	r2, r3, #7
 8002cee:	4922      	ldr	r1, [pc, #136]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e032      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4916      	ldr	r1, [pc, #88]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d32:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	490e      	ldr	r1, [pc, #56]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d46:	f000 f821 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	490a      	ldr	r1, [pc, #40]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002d58:	5ccb      	ldrb	r3, [r1, r3]
 8002d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5e:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x1cc>)
 8002d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_RCC_ClockConfig+0x1d0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe f884 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40022000 	.word	0x40022000
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	08004d24 	.word	0x08004d24
 8002d84:	20000000 	.word	0x20000000
 8002d88:	20000004 	.word	0x20000004

08002d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	2300      	movs	r3, #0
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002da6:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d002      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x30>
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x36>
 8002dba:	e027      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dbe:	613b      	str	r3, [r7, #16]
      break;
 8002dc0:	e027      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	0c9b      	lsrs	r3, r3, #18
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	4a17      	ldr	r2, [pc, #92]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002dcc:	5cd3      	ldrb	r3, [r2, r3]
 8002dce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d010      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	0c5b      	lsrs	r3, r3, #17
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	4a11      	ldr	r2, [pc, #68]	; (8002e2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002de6:	5cd3      	ldrb	r3, [r2, r3]
 8002de8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a0d      	ldr	r2, [pc, #52]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dee:	fb02 f203 	mul.w	r2, r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	e004      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a0c      	ldr	r2, [pc, #48]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e00:	fb02 f303 	mul.w	r3, r2, r3
 8002e04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	613b      	str	r3, [r7, #16]
      break;
 8002e0a:	e002      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e0e:	613b      	str	r3, [r7, #16]
      break;
 8002e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e12:	693b      	ldr	r3, [r7, #16]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
 8002e24:	007a1200 	.word	0x007a1200
 8002e28:	08004d3c 	.word	0x08004d3c
 8002e2c:	08004d4c 	.word	0x08004d4c
 8002e30:	003d0900 	.word	0x003d0900

08002e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e38:	4b02      	ldr	r3, [pc, #8]	; (8002e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	20000000 	.word	0x20000000

08002e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e4c:	f7ff fff2 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4903      	ldr	r1, [pc, #12]	; (8002e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	08004d34 	.word	0x08004d34

08002e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e74:	f7ff ffde 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	0adb      	lsrs	r3, r3, #11
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	4903      	ldr	r1, [pc, #12]	; (8002e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e86:	5ccb      	ldrb	r3, [r1, r3]
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	08004d34 	.word	0x08004d34

08002e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <RCC_Delay+0x34>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <RCC_Delay+0x38>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	0a5b      	lsrs	r3, r3, #9
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002eb4:	bf00      	nop
  }
  while (Delay --);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1e5a      	subs	r2, r3, #1
 8002eba:	60fa      	str	r2, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1f9      	bne.n	8002eb4 <RCC_Delay+0x1c>
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	20000000 	.word	0x20000000
 8002ed0:	10624dd3 	.word	0x10624dd3

08002ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e041      	b.n	8002f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fd fe3c 	bl	8000b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f000 fa5c 	bl	80033d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d001      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e03a      	b.n	8003002 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a18      	ldr	r2, [pc, #96]	; (800300c <HAL_TIM_Base_Start_IT+0x98>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00e      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x58>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb6:	d009      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x58>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x58>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a13      	ldr	r2, [pc, #76]	; (8003014 <HAL_TIM_Base_Start_IT+0xa0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d111      	bne.n	8002ff0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d010      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fee:	e007      	b.n	8003000 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40000400 	.word	0x40000400
 8003014:	40000800 	.word	0x40000800

08003018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d020      	beq.n	800307c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0202 	mvn.w	r2, #2
 800304c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f998 	bl	8003398 <HAL_TIM_IC_CaptureCallback>
 8003068:	e005      	b.n	8003076 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f98b 	bl	8003386 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f99a 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b00      	cmp	r3, #0
 8003084:	d020      	beq.n	80030c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01b      	beq.n	80030c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0204 	mvn.w	r2, #4
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2202      	movs	r2, #2
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f972 	bl	8003398 <HAL_TIM_IC_CaptureCallback>
 80030b4:	e005      	b.n	80030c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f965 	bl	8003386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f974 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d020      	beq.n	8003114 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01b      	beq.n	8003114 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0208 	mvn.w	r2, #8
 80030e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2204      	movs	r2, #4
 80030ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f94c 	bl	8003398 <HAL_TIM_IC_CaptureCallback>
 8003100:	e005      	b.n	800310e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f93f 	bl	8003386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f94e 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b00      	cmp	r3, #0
 800311c:	d020      	beq.n	8003160 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01b      	beq.n	8003160 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0210 	mvn.w	r2, #16
 8003130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2208      	movs	r2, #8
 8003136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f926 	bl	8003398 <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f919 	bl	8003386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f928 	bl	80033aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00c      	beq.n	8003184 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d007      	beq.n	8003184 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0201 	mvn.w	r2, #1
 800317c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fd fc06 	bl	8000990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fa7f 	bl	80036a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00c      	beq.n	80031cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d007      	beq.n	80031cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8f8 	bl	80033bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00c      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d007      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0220 	mvn.w	r2, #32
 80031e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fa52 	bl	8003694 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031f0:	bf00      	nop
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_TIM_ConfigClockSource+0x1c>
 8003210:	2302      	movs	r3, #2
 8003212:	e0b4      	b.n	800337e <HAL_TIM_ConfigClockSource+0x186>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800323a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324c:	d03e      	beq.n	80032cc <HAL_TIM_ConfigClockSource+0xd4>
 800324e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003252:	f200 8087 	bhi.w	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325a:	f000 8086 	beq.w	800336a <HAL_TIM_ConfigClockSource+0x172>
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003262:	d87f      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b70      	cmp	r3, #112	; 0x70
 8003266:	d01a      	beq.n	800329e <HAL_TIM_ConfigClockSource+0xa6>
 8003268:	2b70      	cmp	r3, #112	; 0x70
 800326a:	d87b      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 800326c:	2b60      	cmp	r3, #96	; 0x60
 800326e:	d050      	beq.n	8003312 <HAL_TIM_ConfigClockSource+0x11a>
 8003270:	2b60      	cmp	r3, #96	; 0x60
 8003272:	d877      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b50      	cmp	r3, #80	; 0x50
 8003276:	d03c      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003278:	2b50      	cmp	r3, #80	; 0x50
 800327a:	d873      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d058      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x13a>
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d86f      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b30      	cmp	r3, #48	; 0x30
 8003286:	d064      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 8003288:	2b30      	cmp	r3, #48	; 0x30
 800328a:	d86b      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b20      	cmp	r3, #32
 800328e:	d060      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 8003290:	2b20      	cmp	r3, #32
 8003292:	d867      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d05c      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 8003298:	2b10      	cmp	r3, #16
 800329a:	d05a      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 800329c:	e062      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f000 f974 	bl	800359a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	609a      	str	r2, [r3, #8]
      break;
 80032ca:	e04f      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6899      	ldr	r1, [r3, #8]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f000 f95d 	bl	800359a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ee:	609a      	str	r2, [r3, #8]
      break;
 80032f0:	e03c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6859      	ldr	r1, [r3, #4]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	461a      	mov	r2, r3
 8003300:	f000 f8d4 	bl	80034ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2150      	movs	r1, #80	; 0x50
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f92b 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8003310:	e02c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6859      	ldr	r1, [r3, #4]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	461a      	mov	r2, r3
 8003320:	f000 f8f2 	bl	8003508 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2160      	movs	r1, #96	; 0x60
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f91b 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8003330:	e01c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6859      	ldr	r1, [r3, #4]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	461a      	mov	r2, r3
 8003340:	f000 f8b4 	bl	80034ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2140      	movs	r1, #64	; 0x40
 800334a:	4618      	mov	r0, r3
 800334c:	f000 f90b 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8003350:	e00c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f000 f902 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8003362:	e003      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      break;
 8003368:	e000      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800336a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr

080033aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
	...

080033d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a2f      	ldr	r2, [pc, #188]	; (80034a0 <TIM_Base_SetConfig+0xd0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00b      	beq.n	8003400 <TIM_Base_SetConfig+0x30>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ee:	d007      	beq.n	8003400 <TIM_Base_SetConfig+0x30>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a2c      	ldr	r2, [pc, #176]	; (80034a4 <TIM_Base_SetConfig+0xd4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_Base_SetConfig+0x30>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a2b      	ldr	r2, [pc, #172]	; (80034a8 <TIM_Base_SetConfig+0xd8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d108      	bne.n	8003412 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a22      	ldr	r2, [pc, #136]	; (80034a0 <TIM_Base_SetConfig+0xd0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00b      	beq.n	8003432 <TIM_Base_SetConfig+0x62>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003420:	d007      	beq.n	8003432 <TIM_Base_SetConfig+0x62>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a1f      	ldr	r2, [pc, #124]	; (80034a4 <TIM_Base_SetConfig+0xd4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d003      	beq.n	8003432 <TIM_Base_SetConfig+0x62>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a1e      	ldr	r2, [pc, #120]	; (80034a8 <TIM_Base_SetConfig+0xd8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d108      	bne.n	8003444 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a0d      	ldr	r2, [pc, #52]	; (80034a0 <TIM_Base_SetConfig+0xd0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d103      	bne.n	8003478 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f023 0201 	bic.w	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	611a      	str	r2, [r3, #16]
  }
}
 8003496:	bf00      	nop
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000800 	.word	0x40000800

080034ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	f023 0201 	bic.w	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f023 030a 	bic.w	r3, r3, #10
 80034e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	621a      	str	r2, [r3, #32]
}
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f023 0210 	bic.w	r2, r3, #16
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	031b      	lsls	r3, r3, #12
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003544:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	621a      	str	r2, [r3, #32]
}
 800355c:	bf00      	nop
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr

08003566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	f043 0307 	orr.w	r3, r3, #7
 8003588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	609a      	str	r2, [r3, #8]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr

0800359a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800359a:	b480      	push	{r7}
 800359c:	b087      	sub	sp, #28
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	021a      	lsls	r2, r3, #8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	431a      	orrs	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	609a      	str	r2, [r3, #8]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e046      	b.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a16      	ldr	r2, [pc, #88]	; (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00e      	beq.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363c:	d009      	beq.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a12      	ldr	r2, [pc, #72]	; (800368c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d004      	beq.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a10      	ldr	r2, [pc, #64]	; (8003690 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d10c      	bne.n	800366c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	4313      	orrs	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800

08003694 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr

080036a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e042      	b.n	8003750 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fd fa6e 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2224      	movs	r2, #36	; 0x24
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fd63 	bl	80041c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003710:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003720:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003730:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	; 0x28
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	4613      	mov	r3, r2
 8003766:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b20      	cmp	r3, #32
 8003776:	d175      	bne.n	8003864 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_UART_Transmit+0x2c>
 800377e:	88fb      	ldrh	r3, [r7, #6]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e06e      	b.n	8003866 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2221      	movs	r2, #33	; 0x21
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003796:	f7fd fbaf 	bl	8000ef8 <HAL_GetTick>
 800379a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	88fa      	ldrh	r2, [r7, #6]
 80037a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	88fa      	ldrh	r2, [r7, #6]
 80037a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b0:	d108      	bne.n	80037c4 <HAL_UART_Transmit+0x6c>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	e003      	b.n	80037cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037cc:	e02e      	b.n	800382c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2200      	movs	r2, #0
 80037d6:	2180      	movs	r1, #128	; 0x80
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fb01 	bl	8003de0 <UART_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e03a      	b.n	8003866 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10b      	bne.n	800380e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003804:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	3302      	adds	r3, #2
 800380a:	61bb      	str	r3, [r7, #24]
 800380c:	e007      	b.n	800381e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	781a      	ldrb	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	3301      	adds	r3, #1
 800381c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1cb      	bne.n	80037ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2200      	movs	r2, #0
 800383e:	2140      	movs	r1, #64	; 0x40
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 facd 	bl	8003de0 <UART_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e006      	b.n	8003866 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e000      	b.n	8003866 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003864:	2302      	movs	r3, #2
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b0ba      	sub	sp, #232	; 0xe8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80038ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10f      	bne.n	80038d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <HAL_UART_IRQHandler+0x66>
 80038c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fbbc 	bl	800404c <UART_Receive_IT>
      return;
 80038d4:	e25b      	b.n	8003d8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80de 	beq.w	8003a9c <HAL_UART_IRQHandler+0x22c>
 80038e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80d1 	beq.w	8003a9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00b      	beq.n	800391e <HAL_UART_IRQHandler+0xae>
 8003906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	f043 0201 	orr.w	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800391e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00b      	beq.n	8003942 <HAL_UART_IRQHandler+0xd2>
 800392a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f043 0202 	orr.w	r2, r3, #2
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_UART_IRQHandler+0xf6>
 800394e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d011      	beq.n	8003996 <HAL_UART_IRQHandler+0x126>
 8003972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d105      	bne.n	800398a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800397e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	f043 0208 	orr.w	r2, r3, #8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 81f2 	beq.w	8003d84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_UART_IRQHandler+0x14e>
 80039ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fb47 	bl	800404c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf14      	ite	ne
 80039cc:	2301      	movne	r3, #1
 80039ce:	2300      	moveq	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d103      	bne.n	80039ea <HAL_UART_IRQHandler+0x17a>
 80039e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d04f      	beq.n	8003a8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fa51 	bl	8003e92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d041      	beq.n	8003a82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3314      	adds	r3, #20
 8003a04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3314      	adds	r3, #20
 8003a26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a3a:	e841 2300 	strex	r3, r2, [r1]
 8003a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1d9      	bne.n	80039fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d013      	beq.n	8003a7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	4a7e      	ldr	r2, [pc, #504]	; (8003c50 <HAL_UART_IRQHandler+0x3e0>)
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fd fbc0 	bl	80011e4 <HAL_DMA_Abort_IT>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d016      	beq.n	8003a98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a74:	4610      	mov	r0, r2
 8003a76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	e00e      	b.n	8003a98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f99c 	bl	8003db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a80:	e00a      	b.n	8003a98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f998 	bl	8003db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a88:	e006      	b.n	8003a98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f994 	bl	8003db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003a96:	e175      	b.n	8003d84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a98:	bf00      	nop
    return;
 8003a9a:	e173      	b.n	8003d84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	f040 814f 	bne.w	8003d44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8148 	beq.w	8003d44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8141 	beq.w	8003d44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80b6 	beq.w	8003c54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003af4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8145 	beq.w	8003d88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b06:	429a      	cmp	r2, r3
 8003b08:	f080 813e 	bcs.w	8003d88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	f000 8088 	beq.w	8003c30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b2e:	e853 3f00 	ldrex	r3, [r3]
 8003b32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	330c      	adds	r3, #12
 8003b48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b4c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1d9      	bne.n	8003b20 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3314      	adds	r3, #20
 8003b72:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3314      	adds	r3, #20
 8003b8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b94:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e1      	bne.n	8003b6c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3314      	adds	r3, #20
 8003bae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3314      	adds	r3, #20
 8003bc8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bcc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bd2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bd4:	e841 2300 	strex	r3, r2, [r1]
 8003bd8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e3      	bne.n	8003ba8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c00:	f023 0310 	bic.w	r3, r3, #16
 8003c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c12:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c14:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e3      	bne.n	8003bee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fd fa9f 	bl	800116e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	4619      	mov	r1, r3
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f8bf 	bl	8003dca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c4c:	e09c      	b.n	8003d88 <HAL_UART_IRQHandler+0x518>
 8003c4e:	bf00      	nop
 8003c50:	08003f57 	.word	0x08003f57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 808e 	beq.w	8003d8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8089 	beq.w	8003d8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c9e:	647a      	str	r2, [r7, #68]	; 0x44
 8003ca0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ca4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e3      	bne.n	8003c7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3314      	adds	r3, #20
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	623b      	str	r3, [r7, #32]
   return(result);
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3314      	adds	r3, #20
 8003cd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cd6:	633a      	str	r2, [r7, #48]	; 0x30
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e3      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0310 	bic.w	r3, r3, #16
 8003d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	330c      	adds	r3, #12
 8003d18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d1c:	61fa      	str	r2, [r7, #28]
 8003d1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	69b9      	ldr	r1, [r7, #24]
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	617b      	str	r3, [r7, #20]
   return(result);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e3      	bne.n	8003cf8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f844 	bl	8003dca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d42:	e023      	b.n	8003d8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d009      	beq.n	8003d64 <HAL_UART_IRQHandler+0x4f4>
 8003d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f90e 	bl	8003f7e <UART_Transmit_IT>
    return;
 8003d62:	e014      	b.n	8003d8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00e      	beq.n	8003d8e <HAL_UART_IRQHandler+0x51e>
 8003d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f94d 	bl	800401c <UART_EndTransmit_IT>
    return;
 8003d82:	e004      	b.n	8003d8e <HAL_UART_IRQHandler+0x51e>
    return;
 8003d84:	bf00      	nop
 8003d86:	e002      	b.n	8003d8e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d88:	bf00      	nop
 8003d8a:	e000      	b.n	8003d8e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d8c:	bf00      	nop
  }
}
 8003d8e:	37e8      	adds	r7, #232	; 0xe8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr

08003dca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	4613      	mov	r3, r2
 8003dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df0:	e03b      	b.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df8:	d037      	beq.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfa:	f7fd f87d 	bl	8000ef8 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	6a3a      	ldr	r2, [r7, #32]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d302      	bcc.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e03a      	b.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d023      	beq.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b80      	cmp	r3, #128	; 0x80
 8003e26:	d020      	beq.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b40      	cmp	r3, #64	; 0x40
 8003e2c:	d01d      	beq.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d116      	bne.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f81d 	bl	8003e92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e00f      	b.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4013      	ands	r3, r2
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	bf0c      	ite	eq
 8003e7a:	2301      	moveq	r3, #1
 8003e7c:	2300      	movne	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d0b4      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b095      	sub	sp, #84	; 0x54
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea4:	e853 3f00 	ldrex	r3, [r3]
 8003ea8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003eba:	643a      	str	r2, [r7, #64]	; 0x40
 8003ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ec2:	e841 2300 	strex	r3, r2, [r1]
 8003ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1e5      	bne.n	8003e9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3314      	adds	r3, #20
 8003ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f023 0301 	bic.w	r3, r3, #1
 8003ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e5      	bne.n	8003ece <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d119      	bne.n	8003f3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	330c      	adds	r3, #12
 8003f10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f023 0310 	bic.w	r3, r3, #16
 8003f20:	647b      	str	r3, [r7, #68]	; 0x44
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	330c      	adds	r3, #12
 8003f28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f2a:	61ba      	str	r2, [r7, #24]
 8003f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6979      	ldr	r1, [r7, #20]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	613b      	str	r3, [r7, #16]
   return(result);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e5      	bne.n	8003f0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f4c:	bf00      	nop
 8003f4e:	3754      	adds	r7, #84	; 0x54
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr

08003f56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7ff ff21 	bl	8003db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b21      	cmp	r3, #33	; 0x21
 8003f90:	d13e      	bne.n	8004010 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9a:	d114      	bne.n	8003fc6 <UART_Transmit_IT+0x48>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d110      	bne.n	8003fc6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	1c9a      	adds	r2, r3, #2
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	621a      	str	r2, [r3, #32]
 8003fc4:	e008      	b.n	8003fd8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	1c59      	adds	r1, r3, #1
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6211      	str	r1, [r2, #32]
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10f      	bne.n	800400c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ffa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800400a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004032:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff fea9 	bl	8003d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08c      	sub	sp, #48	; 0x30
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b22      	cmp	r3, #34	; 0x22
 800405e:	f040 80ae 	bne.w	80041be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406a:	d117      	bne.n	800409c <UART_Receive_IT+0x50>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d113      	bne.n	800409c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004074:	2300      	movs	r3, #0
 8004076:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	b29b      	uxth	r3, r3
 8004086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408a:	b29a      	uxth	r2, r3
 800408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	1c9a      	adds	r2, r3, #2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	629a      	str	r2, [r3, #40]	; 0x28
 800409a:	e026      	b.n	80040ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ae:	d007      	beq.n	80040c0 <UART_Receive_IT+0x74>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <UART_Receive_IT+0x82>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d106      	bne.n	80040ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	e008      	b.n	80040e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4619      	mov	r1, r3
 80040f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d15d      	bne.n	80041ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0220 	bic.w	r2, r2, #32
 800410c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800411c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695a      	ldr	r2, [r3, #20]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0201 	bic.w	r2, r2, #1
 800412c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	2b01      	cmp	r3, #1
 8004142:	d135      	bne.n	80041b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	613b      	str	r3, [r7, #16]
   return(result);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f023 0310 	bic.w	r3, r3, #16
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330c      	adds	r3, #12
 8004168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416a:	623a      	str	r2, [r7, #32]
 800416c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	69f9      	ldr	r1, [r7, #28]
 8004170:	6a3a      	ldr	r2, [r7, #32]
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	61bb      	str	r3, [r7, #24]
   return(result);
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e5      	bne.n	800414a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b10      	cmp	r3, #16
 800418a:	d10a      	bne.n	80041a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff fe0e 	bl	8003dca <HAL_UARTEx_RxEventCallback>
 80041ae:	e002      	b.n	80041b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff fdf8 	bl	8003da6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e002      	b.n	80041c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e000      	b.n	80041c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041be:	2302      	movs	r3, #2
  }
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3730      	adds	r7, #48	; 0x30
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004202:	f023 030c 	bic.w	r3, r3, #12
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	430b      	orrs	r3, r1
 800420e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2c      	ldr	r2, [pc, #176]	; (80042dc <UART_SetConfig+0x114>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d103      	bne.n	8004238 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004230:	f7fe fe1e 	bl	8002e70 <HAL_RCC_GetPCLK2Freq>
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	e002      	b.n	800423e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004238:	f7fe fe06 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 800423c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009a      	lsls	r2, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <UART_SetConfig+0x118>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	0119      	lsls	r1, r3, #4
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009a      	lsls	r2, r3, #2
 8004268:	441a      	add	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	fbb2 f2f3 	udiv	r2, r2, r3
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <UART_SetConfig+0x118>)
 8004276:	fba3 0302 	umull	r0, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2064      	movs	r0, #100	; 0x64
 800427e:	fb00 f303 	mul.w	r3, r0, r3
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	3332      	adds	r3, #50	; 0x32
 8004288:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <UART_SetConfig+0x118>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004294:	4419      	add	r1, r3
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009a      	lsls	r2, r3, #2
 80042a0:	441a      	add	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <UART_SetConfig+0x118>)
 80042ae:	fba3 0302 	umull	r0, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2064      	movs	r0, #100	; 0x64
 80042b6:	fb00 f303 	mul.w	r3, r0, r3
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	3332      	adds	r3, #50	; 0x32
 80042c0:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <UART_SetConfig+0x118>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	f003 020f 	and.w	r2, r3, #15
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	440a      	add	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40013800 	.word	0x40013800
 80042e0:	51eb851f 	.word	0x51eb851f

080042e4 <atoi>:
 80042e4:	220a      	movs	r2, #10
 80042e6:	2100      	movs	r1, #0
 80042e8:	f000 b8d8 	b.w	800449c <strtol>

080042ec <__errno>:
 80042ec:	4b01      	ldr	r3, [pc, #4]	; (80042f4 <__errno+0x8>)
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	2000000c 	.word	0x2000000c

080042f8 <__libc_init_array>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	2600      	movs	r6, #0
 80042fc:	4d0c      	ldr	r5, [pc, #48]	; (8004330 <__libc_init_array+0x38>)
 80042fe:	4c0d      	ldr	r4, [pc, #52]	; (8004334 <__libc_init_array+0x3c>)
 8004300:	1b64      	subs	r4, r4, r5
 8004302:	10a4      	asrs	r4, r4, #2
 8004304:	42a6      	cmp	r6, r4
 8004306:	d109      	bne.n	800431c <__libc_init_array+0x24>
 8004308:	f000 fcec 	bl	8004ce4 <_init>
 800430c:	2600      	movs	r6, #0
 800430e:	4d0a      	ldr	r5, [pc, #40]	; (8004338 <__libc_init_array+0x40>)
 8004310:	4c0a      	ldr	r4, [pc, #40]	; (800433c <__libc_init_array+0x44>)
 8004312:	1b64      	subs	r4, r4, r5
 8004314:	10a4      	asrs	r4, r4, #2
 8004316:	42a6      	cmp	r6, r4
 8004318:	d105      	bne.n	8004326 <__libc_init_array+0x2e>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004320:	4798      	blx	r3
 8004322:	3601      	adds	r6, #1
 8004324:	e7ee      	b.n	8004304 <__libc_init_array+0xc>
 8004326:	f855 3b04 	ldr.w	r3, [r5], #4
 800432a:	4798      	blx	r3
 800432c:	3601      	adds	r6, #1
 800432e:	e7f2      	b.n	8004316 <__libc_init_array+0x1e>
 8004330:	08004e84 	.word	0x08004e84
 8004334:	08004e84 	.word	0x08004e84
 8004338:	08004e84 	.word	0x08004e84
 800433c:	08004e88 	.word	0x08004e88

08004340 <memset>:
 8004340:	4603      	mov	r3, r0
 8004342:	4402      	add	r2, r0
 8004344:	4293      	cmp	r3, r2
 8004346:	d100      	bne.n	800434a <memset+0xa>
 8004348:	4770      	bx	lr
 800434a:	f803 1b01 	strb.w	r1, [r3], #1
 800434e:	e7f9      	b.n	8004344 <memset+0x4>

08004350 <siprintf>:
 8004350:	b40e      	push	{r1, r2, r3}
 8004352:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004356:	b500      	push	{lr}
 8004358:	b09c      	sub	sp, #112	; 0x70
 800435a:	ab1d      	add	r3, sp, #116	; 0x74
 800435c:	9002      	str	r0, [sp, #8]
 800435e:	9006      	str	r0, [sp, #24]
 8004360:	9107      	str	r1, [sp, #28]
 8004362:	9104      	str	r1, [sp, #16]
 8004364:	4808      	ldr	r0, [pc, #32]	; (8004388 <siprintf+0x38>)
 8004366:	4909      	ldr	r1, [pc, #36]	; (800438c <siprintf+0x3c>)
 8004368:	f853 2b04 	ldr.w	r2, [r3], #4
 800436c:	9105      	str	r1, [sp, #20]
 800436e:	6800      	ldr	r0, [r0, #0]
 8004370:	a902      	add	r1, sp, #8
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	f000 f8f8 	bl	8004568 <_svfiprintf_r>
 8004378:	2200      	movs	r2, #0
 800437a:	9b02      	ldr	r3, [sp, #8]
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	b01c      	add	sp, #112	; 0x70
 8004380:	f85d eb04 	ldr.w	lr, [sp], #4
 8004384:	b003      	add	sp, #12
 8004386:	4770      	bx	lr
 8004388:	2000000c 	.word	0x2000000c
 800438c:	ffff0208 	.word	0xffff0208

08004390 <_strtol_l.isra.0>:
 8004390:	2b01      	cmp	r3, #1
 8004392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004396:	4686      	mov	lr, r0
 8004398:	d001      	beq.n	800439e <_strtol_l.isra.0+0xe>
 800439a:	2b24      	cmp	r3, #36	; 0x24
 800439c:	d906      	bls.n	80043ac <_strtol_l.isra.0+0x1c>
 800439e:	f7ff ffa5 	bl	80042ec <__errno>
 80043a2:	2316      	movs	r3, #22
 80043a4:	6003      	str	r3, [r0, #0]
 80043a6:	2000      	movs	r0, #0
 80043a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ac:	468c      	mov	ip, r1
 80043ae:	4e3a      	ldr	r6, [pc, #232]	; (8004498 <_strtol_l.isra.0+0x108>)
 80043b0:	4660      	mov	r0, ip
 80043b2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80043b6:	5da5      	ldrb	r5, [r4, r6]
 80043b8:	f015 0508 	ands.w	r5, r5, #8
 80043bc:	d1f8      	bne.n	80043b0 <_strtol_l.isra.0+0x20>
 80043be:	2c2d      	cmp	r4, #45	; 0x2d
 80043c0:	d133      	bne.n	800442a <_strtol_l.isra.0+0x9a>
 80043c2:	f04f 0801 	mov.w	r8, #1
 80043c6:	f89c 4000 	ldrb.w	r4, [ip]
 80043ca:	f100 0c02 	add.w	ip, r0, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d05d      	beq.n	800448e <_strtol_l.isra.0+0xfe>
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d10c      	bne.n	80043f0 <_strtol_l.isra.0+0x60>
 80043d6:	2c30      	cmp	r4, #48	; 0x30
 80043d8:	d10a      	bne.n	80043f0 <_strtol_l.isra.0+0x60>
 80043da:	f89c 0000 	ldrb.w	r0, [ip]
 80043de:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80043e2:	2858      	cmp	r0, #88	; 0x58
 80043e4:	d14e      	bne.n	8004484 <_strtol_l.isra.0+0xf4>
 80043e6:	2310      	movs	r3, #16
 80043e8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80043ec:	f10c 0c02 	add.w	ip, ip, #2
 80043f0:	2500      	movs	r5, #0
 80043f2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80043f6:	3f01      	subs	r7, #1
 80043f8:	fbb7 f9f3 	udiv	r9, r7, r3
 80043fc:	4628      	mov	r0, r5
 80043fe:	fb03 7a19 	mls	sl, r3, r9, r7
 8004402:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004406:	2e09      	cmp	r6, #9
 8004408:	d818      	bhi.n	800443c <_strtol_l.isra.0+0xac>
 800440a:	4634      	mov	r4, r6
 800440c:	42a3      	cmp	r3, r4
 800440e:	dd24      	ble.n	800445a <_strtol_l.isra.0+0xca>
 8004410:	2d00      	cmp	r5, #0
 8004412:	db1f      	blt.n	8004454 <_strtol_l.isra.0+0xc4>
 8004414:	4581      	cmp	r9, r0
 8004416:	d31d      	bcc.n	8004454 <_strtol_l.isra.0+0xc4>
 8004418:	d101      	bne.n	800441e <_strtol_l.isra.0+0x8e>
 800441a:	45a2      	cmp	sl, r4
 800441c:	db1a      	blt.n	8004454 <_strtol_l.isra.0+0xc4>
 800441e:	2501      	movs	r5, #1
 8004420:	fb00 4003 	mla	r0, r0, r3, r4
 8004424:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004428:	e7eb      	b.n	8004402 <_strtol_l.isra.0+0x72>
 800442a:	2c2b      	cmp	r4, #43	; 0x2b
 800442c:	bf08      	it	eq
 800442e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004432:	46a8      	mov	r8, r5
 8004434:	bf08      	it	eq
 8004436:	f100 0c02 	addeq.w	ip, r0, #2
 800443a:	e7c8      	b.n	80043ce <_strtol_l.isra.0+0x3e>
 800443c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004440:	2e19      	cmp	r6, #25
 8004442:	d801      	bhi.n	8004448 <_strtol_l.isra.0+0xb8>
 8004444:	3c37      	subs	r4, #55	; 0x37
 8004446:	e7e1      	b.n	800440c <_strtol_l.isra.0+0x7c>
 8004448:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800444c:	2e19      	cmp	r6, #25
 800444e:	d804      	bhi.n	800445a <_strtol_l.isra.0+0xca>
 8004450:	3c57      	subs	r4, #87	; 0x57
 8004452:	e7db      	b.n	800440c <_strtol_l.isra.0+0x7c>
 8004454:	f04f 35ff 	mov.w	r5, #4294967295
 8004458:	e7e4      	b.n	8004424 <_strtol_l.isra.0+0x94>
 800445a:	2d00      	cmp	r5, #0
 800445c:	da08      	bge.n	8004470 <_strtol_l.isra.0+0xe0>
 800445e:	2322      	movs	r3, #34	; 0x22
 8004460:	4638      	mov	r0, r7
 8004462:	f8ce 3000 	str.w	r3, [lr]
 8004466:	2a00      	cmp	r2, #0
 8004468:	d09e      	beq.n	80043a8 <_strtol_l.isra.0+0x18>
 800446a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800446e:	e007      	b.n	8004480 <_strtol_l.isra.0+0xf0>
 8004470:	f1b8 0f00 	cmp.w	r8, #0
 8004474:	d000      	beq.n	8004478 <_strtol_l.isra.0+0xe8>
 8004476:	4240      	negs	r0, r0
 8004478:	2a00      	cmp	r2, #0
 800447a:	d095      	beq.n	80043a8 <_strtol_l.isra.0+0x18>
 800447c:	2d00      	cmp	r5, #0
 800447e:	d1f4      	bne.n	800446a <_strtol_l.isra.0+0xda>
 8004480:	6011      	str	r1, [r2, #0]
 8004482:	e791      	b.n	80043a8 <_strtol_l.isra.0+0x18>
 8004484:	2430      	movs	r4, #48	; 0x30
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1b2      	bne.n	80043f0 <_strtol_l.isra.0+0x60>
 800448a:	2308      	movs	r3, #8
 800448c:	e7b0      	b.n	80043f0 <_strtol_l.isra.0+0x60>
 800448e:	2c30      	cmp	r4, #48	; 0x30
 8004490:	d0a3      	beq.n	80043da <_strtol_l.isra.0+0x4a>
 8004492:	230a      	movs	r3, #10
 8004494:	e7ac      	b.n	80043f0 <_strtol_l.isra.0+0x60>
 8004496:	bf00      	nop
 8004498:	08004d4f 	.word	0x08004d4f

0800449c <strtol>:
 800449c:	4613      	mov	r3, r2
 800449e:	460a      	mov	r2, r1
 80044a0:	4601      	mov	r1, r0
 80044a2:	4802      	ldr	r0, [pc, #8]	; (80044ac <strtol+0x10>)
 80044a4:	6800      	ldr	r0, [r0, #0]
 80044a6:	f7ff bf73 	b.w	8004390 <_strtol_l.isra.0>
 80044aa:	bf00      	nop
 80044ac:	2000000c 	.word	0x2000000c

080044b0 <__ssputs_r>:
 80044b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b4:	688e      	ldr	r6, [r1, #8]
 80044b6:	4682      	mov	sl, r0
 80044b8:	429e      	cmp	r6, r3
 80044ba:	460c      	mov	r4, r1
 80044bc:	4690      	mov	r8, r2
 80044be:	461f      	mov	r7, r3
 80044c0:	d838      	bhi.n	8004534 <__ssputs_r+0x84>
 80044c2:	898a      	ldrh	r2, [r1, #12]
 80044c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044c8:	d032      	beq.n	8004530 <__ssputs_r+0x80>
 80044ca:	6825      	ldr	r5, [r4, #0]
 80044cc:	6909      	ldr	r1, [r1, #16]
 80044ce:	3301      	adds	r3, #1
 80044d0:	eba5 0901 	sub.w	r9, r5, r1
 80044d4:	6965      	ldr	r5, [r4, #20]
 80044d6:	444b      	add	r3, r9
 80044d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044e0:	106d      	asrs	r5, r5, #1
 80044e2:	429d      	cmp	r5, r3
 80044e4:	bf38      	it	cc
 80044e6:	461d      	movcc	r5, r3
 80044e8:	0553      	lsls	r3, r2, #21
 80044ea:	d531      	bpl.n	8004550 <__ssputs_r+0xa0>
 80044ec:	4629      	mov	r1, r5
 80044ee:	f000 fb53 	bl	8004b98 <_malloc_r>
 80044f2:	4606      	mov	r6, r0
 80044f4:	b950      	cbnz	r0, 800450c <__ssputs_r+0x5c>
 80044f6:	230c      	movs	r3, #12
 80044f8:	f04f 30ff 	mov.w	r0, #4294967295
 80044fc:	f8ca 3000 	str.w	r3, [sl]
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004506:	81a3      	strh	r3, [r4, #12]
 8004508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450c:	464a      	mov	r2, r9
 800450e:	6921      	ldr	r1, [r4, #16]
 8004510:	f000 face 	bl	8004ab0 <memcpy>
 8004514:	89a3      	ldrh	r3, [r4, #12]
 8004516:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800451a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451e:	81a3      	strh	r3, [r4, #12]
 8004520:	6126      	str	r6, [r4, #16]
 8004522:	444e      	add	r6, r9
 8004524:	6026      	str	r6, [r4, #0]
 8004526:	463e      	mov	r6, r7
 8004528:	6165      	str	r5, [r4, #20]
 800452a:	eba5 0509 	sub.w	r5, r5, r9
 800452e:	60a5      	str	r5, [r4, #8]
 8004530:	42be      	cmp	r6, r7
 8004532:	d900      	bls.n	8004536 <__ssputs_r+0x86>
 8004534:	463e      	mov	r6, r7
 8004536:	4632      	mov	r2, r6
 8004538:	4641      	mov	r1, r8
 800453a:	6820      	ldr	r0, [r4, #0]
 800453c:	f000 fac6 	bl	8004acc <memmove>
 8004540:	68a3      	ldr	r3, [r4, #8]
 8004542:	6822      	ldr	r2, [r4, #0]
 8004544:	1b9b      	subs	r3, r3, r6
 8004546:	4432      	add	r2, r6
 8004548:	2000      	movs	r0, #0
 800454a:	60a3      	str	r3, [r4, #8]
 800454c:	6022      	str	r2, [r4, #0]
 800454e:	e7db      	b.n	8004508 <__ssputs_r+0x58>
 8004550:	462a      	mov	r2, r5
 8004552:	f000 fb7b 	bl	8004c4c <_realloc_r>
 8004556:	4606      	mov	r6, r0
 8004558:	2800      	cmp	r0, #0
 800455a:	d1e1      	bne.n	8004520 <__ssputs_r+0x70>
 800455c:	4650      	mov	r0, sl
 800455e:	6921      	ldr	r1, [r4, #16]
 8004560:	f000 face 	bl	8004b00 <_free_r>
 8004564:	e7c7      	b.n	80044f6 <__ssputs_r+0x46>
	...

08004568 <_svfiprintf_r>:
 8004568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456c:	4698      	mov	r8, r3
 800456e:	898b      	ldrh	r3, [r1, #12]
 8004570:	4607      	mov	r7, r0
 8004572:	061b      	lsls	r3, r3, #24
 8004574:	460d      	mov	r5, r1
 8004576:	4614      	mov	r4, r2
 8004578:	b09d      	sub	sp, #116	; 0x74
 800457a:	d50e      	bpl.n	800459a <_svfiprintf_r+0x32>
 800457c:	690b      	ldr	r3, [r1, #16]
 800457e:	b963      	cbnz	r3, 800459a <_svfiprintf_r+0x32>
 8004580:	2140      	movs	r1, #64	; 0x40
 8004582:	f000 fb09 	bl	8004b98 <_malloc_r>
 8004586:	6028      	str	r0, [r5, #0]
 8004588:	6128      	str	r0, [r5, #16]
 800458a:	b920      	cbnz	r0, 8004596 <_svfiprintf_r+0x2e>
 800458c:	230c      	movs	r3, #12
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	e0d1      	b.n	800473a <_svfiprintf_r+0x1d2>
 8004596:	2340      	movs	r3, #64	; 0x40
 8004598:	616b      	str	r3, [r5, #20]
 800459a:	2300      	movs	r3, #0
 800459c:	9309      	str	r3, [sp, #36]	; 0x24
 800459e:	2320      	movs	r3, #32
 80045a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045a4:	2330      	movs	r3, #48	; 0x30
 80045a6:	f04f 0901 	mov.w	r9, #1
 80045aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80045ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004754 <_svfiprintf_r+0x1ec>
 80045b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045b6:	4623      	mov	r3, r4
 80045b8:	469a      	mov	sl, r3
 80045ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045be:	b10a      	cbz	r2, 80045c4 <_svfiprintf_r+0x5c>
 80045c0:	2a25      	cmp	r2, #37	; 0x25
 80045c2:	d1f9      	bne.n	80045b8 <_svfiprintf_r+0x50>
 80045c4:	ebba 0b04 	subs.w	fp, sl, r4
 80045c8:	d00b      	beq.n	80045e2 <_svfiprintf_r+0x7a>
 80045ca:	465b      	mov	r3, fp
 80045cc:	4622      	mov	r2, r4
 80045ce:	4629      	mov	r1, r5
 80045d0:	4638      	mov	r0, r7
 80045d2:	f7ff ff6d 	bl	80044b0 <__ssputs_r>
 80045d6:	3001      	adds	r0, #1
 80045d8:	f000 80aa 	beq.w	8004730 <_svfiprintf_r+0x1c8>
 80045dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045de:	445a      	add	r2, fp
 80045e0:	9209      	str	r2, [sp, #36]	; 0x24
 80045e2:	f89a 3000 	ldrb.w	r3, [sl]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 80a2 	beq.w	8004730 <_svfiprintf_r+0x1c8>
 80045ec:	2300      	movs	r3, #0
 80045ee:	f04f 32ff 	mov.w	r2, #4294967295
 80045f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045f6:	f10a 0a01 	add.w	sl, sl, #1
 80045fa:	9304      	str	r3, [sp, #16]
 80045fc:	9307      	str	r3, [sp, #28]
 80045fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004602:	931a      	str	r3, [sp, #104]	; 0x68
 8004604:	4654      	mov	r4, sl
 8004606:	2205      	movs	r2, #5
 8004608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800460c:	4851      	ldr	r0, [pc, #324]	; (8004754 <_svfiprintf_r+0x1ec>)
 800460e:	f000 fa41 	bl	8004a94 <memchr>
 8004612:	9a04      	ldr	r2, [sp, #16]
 8004614:	b9d8      	cbnz	r0, 800464e <_svfiprintf_r+0xe6>
 8004616:	06d0      	lsls	r0, r2, #27
 8004618:	bf44      	itt	mi
 800461a:	2320      	movmi	r3, #32
 800461c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004620:	0711      	lsls	r1, r2, #28
 8004622:	bf44      	itt	mi
 8004624:	232b      	movmi	r3, #43	; 0x2b
 8004626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800462a:	f89a 3000 	ldrb.w	r3, [sl]
 800462e:	2b2a      	cmp	r3, #42	; 0x2a
 8004630:	d015      	beq.n	800465e <_svfiprintf_r+0xf6>
 8004632:	4654      	mov	r4, sl
 8004634:	2000      	movs	r0, #0
 8004636:	f04f 0c0a 	mov.w	ip, #10
 800463a:	9a07      	ldr	r2, [sp, #28]
 800463c:	4621      	mov	r1, r4
 800463e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004642:	3b30      	subs	r3, #48	; 0x30
 8004644:	2b09      	cmp	r3, #9
 8004646:	d94e      	bls.n	80046e6 <_svfiprintf_r+0x17e>
 8004648:	b1b0      	cbz	r0, 8004678 <_svfiprintf_r+0x110>
 800464a:	9207      	str	r2, [sp, #28]
 800464c:	e014      	b.n	8004678 <_svfiprintf_r+0x110>
 800464e:	eba0 0308 	sub.w	r3, r0, r8
 8004652:	fa09 f303 	lsl.w	r3, r9, r3
 8004656:	4313      	orrs	r3, r2
 8004658:	46a2      	mov	sl, r4
 800465a:	9304      	str	r3, [sp, #16]
 800465c:	e7d2      	b.n	8004604 <_svfiprintf_r+0x9c>
 800465e:	9b03      	ldr	r3, [sp, #12]
 8004660:	1d19      	adds	r1, r3, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	9103      	str	r1, [sp, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	bfbb      	ittet	lt
 800466a:	425b      	neglt	r3, r3
 800466c:	f042 0202 	orrlt.w	r2, r2, #2
 8004670:	9307      	strge	r3, [sp, #28]
 8004672:	9307      	strlt	r3, [sp, #28]
 8004674:	bfb8      	it	lt
 8004676:	9204      	strlt	r2, [sp, #16]
 8004678:	7823      	ldrb	r3, [r4, #0]
 800467a:	2b2e      	cmp	r3, #46	; 0x2e
 800467c:	d10c      	bne.n	8004698 <_svfiprintf_r+0x130>
 800467e:	7863      	ldrb	r3, [r4, #1]
 8004680:	2b2a      	cmp	r3, #42	; 0x2a
 8004682:	d135      	bne.n	80046f0 <_svfiprintf_r+0x188>
 8004684:	9b03      	ldr	r3, [sp, #12]
 8004686:	3402      	adds	r4, #2
 8004688:	1d1a      	adds	r2, r3, #4
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	9203      	str	r2, [sp, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	bfb8      	it	lt
 8004692:	f04f 33ff 	movlt.w	r3, #4294967295
 8004696:	9305      	str	r3, [sp, #20]
 8004698:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004764 <_svfiprintf_r+0x1fc>
 800469c:	2203      	movs	r2, #3
 800469e:	4650      	mov	r0, sl
 80046a0:	7821      	ldrb	r1, [r4, #0]
 80046a2:	f000 f9f7 	bl	8004a94 <memchr>
 80046a6:	b140      	cbz	r0, 80046ba <_svfiprintf_r+0x152>
 80046a8:	2340      	movs	r3, #64	; 0x40
 80046aa:	eba0 000a 	sub.w	r0, r0, sl
 80046ae:	fa03 f000 	lsl.w	r0, r3, r0
 80046b2:	9b04      	ldr	r3, [sp, #16]
 80046b4:	3401      	adds	r4, #1
 80046b6:	4303      	orrs	r3, r0
 80046b8:	9304      	str	r3, [sp, #16]
 80046ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046be:	2206      	movs	r2, #6
 80046c0:	4825      	ldr	r0, [pc, #148]	; (8004758 <_svfiprintf_r+0x1f0>)
 80046c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046c6:	f000 f9e5 	bl	8004a94 <memchr>
 80046ca:	2800      	cmp	r0, #0
 80046cc:	d038      	beq.n	8004740 <_svfiprintf_r+0x1d8>
 80046ce:	4b23      	ldr	r3, [pc, #140]	; (800475c <_svfiprintf_r+0x1f4>)
 80046d0:	bb1b      	cbnz	r3, 800471a <_svfiprintf_r+0x1b2>
 80046d2:	9b03      	ldr	r3, [sp, #12]
 80046d4:	3307      	adds	r3, #7
 80046d6:	f023 0307 	bic.w	r3, r3, #7
 80046da:	3308      	adds	r3, #8
 80046dc:	9303      	str	r3, [sp, #12]
 80046de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e0:	4433      	add	r3, r6
 80046e2:	9309      	str	r3, [sp, #36]	; 0x24
 80046e4:	e767      	b.n	80045b6 <_svfiprintf_r+0x4e>
 80046e6:	460c      	mov	r4, r1
 80046e8:	2001      	movs	r0, #1
 80046ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80046ee:	e7a5      	b.n	800463c <_svfiprintf_r+0xd4>
 80046f0:	2300      	movs	r3, #0
 80046f2:	f04f 0c0a 	mov.w	ip, #10
 80046f6:	4619      	mov	r1, r3
 80046f8:	3401      	adds	r4, #1
 80046fa:	9305      	str	r3, [sp, #20]
 80046fc:	4620      	mov	r0, r4
 80046fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004702:	3a30      	subs	r2, #48	; 0x30
 8004704:	2a09      	cmp	r2, #9
 8004706:	d903      	bls.n	8004710 <_svfiprintf_r+0x1a8>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0c5      	beq.n	8004698 <_svfiprintf_r+0x130>
 800470c:	9105      	str	r1, [sp, #20]
 800470e:	e7c3      	b.n	8004698 <_svfiprintf_r+0x130>
 8004710:	4604      	mov	r4, r0
 8004712:	2301      	movs	r3, #1
 8004714:	fb0c 2101 	mla	r1, ip, r1, r2
 8004718:	e7f0      	b.n	80046fc <_svfiprintf_r+0x194>
 800471a:	ab03      	add	r3, sp, #12
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	462a      	mov	r2, r5
 8004720:	4638      	mov	r0, r7
 8004722:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <_svfiprintf_r+0x1f8>)
 8004724:	a904      	add	r1, sp, #16
 8004726:	f3af 8000 	nop.w
 800472a:	1c42      	adds	r2, r0, #1
 800472c:	4606      	mov	r6, r0
 800472e:	d1d6      	bne.n	80046de <_svfiprintf_r+0x176>
 8004730:	89ab      	ldrh	r3, [r5, #12]
 8004732:	065b      	lsls	r3, r3, #25
 8004734:	f53f af2c 	bmi.w	8004590 <_svfiprintf_r+0x28>
 8004738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800473a:	b01d      	add	sp, #116	; 0x74
 800473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004740:	ab03      	add	r3, sp, #12
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	462a      	mov	r2, r5
 8004746:	4638      	mov	r0, r7
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <_svfiprintf_r+0x1f8>)
 800474a:	a904      	add	r1, sp, #16
 800474c:	f000 f87c 	bl	8004848 <_printf_i>
 8004750:	e7eb      	b.n	800472a <_svfiprintf_r+0x1c2>
 8004752:	bf00      	nop
 8004754:	08004e4f 	.word	0x08004e4f
 8004758:	08004e59 	.word	0x08004e59
 800475c:	00000000 	.word	0x00000000
 8004760:	080044b1 	.word	0x080044b1
 8004764:	08004e55 	.word	0x08004e55

08004768 <_printf_common>:
 8004768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800476c:	4616      	mov	r6, r2
 800476e:	4699      	mov	r9, r3
 8004770:	688a      	ldr	r2, [r1, #8]
 8004772:	690b      	ldr	r3, [r1, #16]
 8004774:	4607      	mov	r7, r0
 8004776:	4293      	cmp	r3, r2
 8004778:	bfb8      	it	lt
 800477a:	4613      	movlt	r3, r2
 800477c:	6033      	str	r3, [r6, #0]
 800477e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004782:	460c      	mov	r4, r1
 8004784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004788:	b10a      	cbz	r2, 800478e <_printf_common+0x26>
 800478a:	3301      	adds	r3, #1
 800478c:	6033      	str	r3, [r6, #0]
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	0699      	lsls	r1, r3, #26
 8004792:	bf42      	ittt	mi
 8004794:	6833      	ldrmi	r3, [r6, #0]
 8004796:	3302      	addmi	r3, #2
 8004798:	6033      	strmi	r3, [r6, #0]
 800479a:	6825      	ldr	r5, [r4, #0]
 800479c:	f015 0506 	ands.w	r5, r5, #6
 80047a0:	d106      	bne.n	80047b0 <_printf_common+0x48>
 80047a2:	f104 0a19 	add.w	sl, r4, #25
 80047a6:	68e3      	ldr	r3, [r4, #12]
 80047a8:	6832      	ldr	r2, [r6, #0]
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	42ab      	cmp	r3, r5
 80047ae:	dc28      	bgt.n	8004802 <_printf_common+0x9a>
 80047b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047b4:	1e13      	subs	r3, r2, #0
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	bf18      	it	ne
 80047ba:	2301      	movne	r3, #1
 80047bc:	0692      	lsls	r2, r2, #26
 80047be:	d42d      	bmi.n	800481c <_printf_common+0xb4>
 80047c0:	4649      	mov	r1, r9
 80047c2:	4638      	mov	r0, r7
 80047c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047c8:	47c0      	blx	r8
 80047ca:	3001      	adds	r0, #1
 80047cc:	d020      	beq.n	8004810 <_printf_common+0xa8>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	68e5      	ldr	r5, [r4, #12]
 80047d2:	f003 0306 	and.w	r3, r3, #6
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	bf18      	it	ne
 80047da:	2500      	movne	r5, #0
 80047dc:	6832      	ldr	r2, [r6, #0]
 80047de:	f04f 0600 	mov.w	r6, #0
 80047e2:	68a3      	ldr	r3, [r4, #8]
 80047e4:	bf08      	it	eq
 80047e6:	1aad      	subeq	r5, r5, r2
 80047e8:	6922      	ldr	r2, [r4, #16]
 80047ea:	bf08      	it	eq
 80047ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047f0:	4293      	cmp	r3, r2
 80047f2:	bfc4      	itt	gt
 80047f4:	1a9b      	subgt	r3, r3, r2
 80047f6:	18ed      	addgt	r5, r5, r3
 80047f8:	341a      	adds	r4, #26
 80047fa:	42b5      	cmp	r5, r6
 80047fc:	d11a      	bne.n	8004834 <_printf_common+0xcc>
 80047fe:	2000      	movs	r0, #0
 8004800:	e008      	b.n	8004814 <_printf_common+0xac>
 8004802:	2301      	movs	r3, #1
 8004804:	4652      	mov	r2, sl
 8004806:	4649      	mov	r1, r9
 8004808:	4638      	mov	r0, r7
 800480a:	47c0      	blx	r8
 800480c:	3001      	adds	r0, #1
 800480e:	d103      	bne.n	8004818 <_printf_common+0xb0>
 8004810:	f04f 30ff 	mov.w	r0, #4294967295
 8004814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004818:	3501      	adds	r5, #1
 800481a:	e7c4      	b.n	80047a6 <_printf_common+0x3e>
 800481c:	2030      	movs	r0, #48	; 0x30
 800481e:	18e1      	adds	r1, r4, r3
 8004820:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800482a:	4422      	add	r2, r4
 800482c:	3302      	adds	r3, #2
 800482e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004832:	e7c5      	b.n	80047c0 <_printf_common+0x58>
 8004834:	2301      	movs	r3, #1
 8004836:	4622      	mov	r2, r4
 8004838:	4649      	mov	r1, r9
 800483a:	4638      	mov	r0, r7
 800483c:	47c0      	blx	r8
 800483e:	3001      	adds	r0, #1
 8004840:	d0e6      	beq.n	8004810 <_printf_common+0xa8>
 8004842:	3601      	adds	r6, #1
 8004844:	e7d9      	b.n	80047fa <_printf_common+0x92>
	...

08004848 <_printf_i>:
 8004848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800484c:	460c      	mov	r4, r1
 800484e:	7e27      	ldrb	r7, [r4, #24]
 8004850:	4691      	mov	r9, r2
 8004852:	2f78      	cmp	r7, #120	; 0x78
 8004854:	4680      	mov	r8, r0
 8004856:	469a      	mov	sl, r3
 8004858:	990c      	ldr	r1, [sp, #48]	; 0x30
 800485a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800485e:	d807      	bhi.n	8004870 <_printf_i+0x28>
 8004860:	2f62      	cmp	r7, #98	; 0x62
 8004862:	d80a      	bhi.n	800487a <_printf_i+0x32>
 8004864:	2f00      	cmp	r7, #0
 8004866:	f000 80d9 	beq.w	8004a1c <_printf_i+0x1d4>
 800486a:	2f58      	cmp	r7, #88	; 0x58
 800486c:	f000 80a4 	beq.w	80049b8 <_printf_i+0x170>
 8004870:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004878:	e03a      	b.n	80048f0 <_printf_i+0xa8>
 800487a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800487e:	2b15      	cmp	r3, #21
 8004880:	d8f6      	bhi.n	8004870 <_printf_i+0x28>
 8004882:	a001      	add	r0, pc, #4	; (adr r0, 8004888 <_printf_i+0x40>)
 8004884:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004888:	080048e1 	.word	0x080048e1
 800488c:	080048f5 	.word	0x080048f5
 8004890:	08004871 	.word	0x08004871
 8004894:	08004871 	.word	0x08004871
 8004898:	08004871 	.word	0x08004871
 800489c:	08004871 	.word	0x08004871
 80048a0:	080048f5 	.word	0x080048f5
 80048a4:	08004871 	.word	0x08004871
 80048a8:	08004871 	.word	0x08004871
 80048ac:	08004871 	.word	0x08004871
 80048b0:	08004871 	.word	0x08004871
 80048b4:	08004a03 	.word	0x08004a03
 80048b8:	08004925 	.word	0x08004925
 80048bc:	080049e5 	.word	0x080049e5
 80048c0:	08004871 	.word	0x08004871
 80048c4:	08004871 	.word	0x08004871
 80048c8:	08004a25 	.word	0x08004a25
 80048cc:	08004871 	.word	0x08004871
 80048d0:	08004925 	.word	0x08004925
 80048d4:	08004871 	.word	0x08004871
 80048d8:	08004871 	.word	0x08004871
 80048dc:	080049ed 	.word	0x080049ed
 80048e0:	680b      	ldr	r3, [r1, #0]
 80048e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048e6:	1d1a      	adds	r2, r3, #4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	600a      	str	r2, [r1, #0]
 80048ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048f0:	2301      	movs	r3, #1
 80048f2:	e0a4      	b.n	8004a3e <_printf_i+0x1f6>
 80048f4:	6825      	ldr	r5, [r4, #0]
 80048f6:	6808      	ldr	r0, [r1, #0]
 80048f8:	062e      	lsls	r6, r5, #24
 80048fa:	f100 0304 	add.w	r3, r0, #4
 80048fe:	d50a      	bpl.n	8004916 <_printf_i+0xce>
 8004900:	6805      	ldr	r5, [r0, #0]
 8004902:	600b      	str	r3, [r1, #0]
 8004904:	2d00      	cmp	r5, #0
 8004906:	da03      	bge.n	8004910 <_printf_i+0xc8>
 8004908:	232d      	movs	r3, #45	; 0x2d
 800490a:	426d      	negs	r5, r5
 800490c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004910:	230a      	movs	r3, #10
 8004912:	485e      	ldr	r0, [pc, #376]	; (8004a8c <_printf_i+0x244>)
 8004914:	e019      	b.n	800494a <_printf_i+0x102>
 8004916:	f015 0f40 	tst.w	r5, #64	; 0x40
 800491a:	6805      	ldr	r5, [r0, #0]
 800491c:	600b      	str	r3, [r1, #0]
 800491e:	bf18      	it	ne
 8004920:	b22d      	sxthne	r5, r5
 8004922:	e7ef      	b.n	8004904 <_printf_i+0xbc>
 8004924:	680b      	ldr	r3, [r1, #0]
 8004926:	6825      	ldr	r5, [r4, #0]
 8004928:	1d18      	adds	r0, r3, #4
 800492a:	6008      	str	r0, [r1, #0]
 800492c:	0628      	lsls	r0, r5, #24
 800492e:	d501      	bpl.n	8004934 <_printf_i+0xec>
 8004930:	681d      	ldr	r5, [r3, #0]
 8004932:	e002      	b.n	800493a <_printf_i+0xf2>
 8004934:	0669      	lsls	r1, r5, #25
 8004936:	d5fb      	bpl.n	8004930 <_printf_i+0xe8>
 8004938:	881d      	ldrh	r5, [r3, #0]
 800493a:	2f6f      	cmp	r7, #111	; 0x6f
 800493c:	bf0c      	ite	eq
 800493e:	2308      	moveq	r3, #8
 8004940:	230a      	movne	r3, #10
 8004942:	4852      	ldr	r0, [pc, #328]	; (8004a8c <_printf_i+0x244>)
 8004944:	2100      	movs	r1, #0
 8004946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800494a:	6866      	ldr	r6, [r4, #4]
 800494c:	2e00      	cmp	r6, #0
 800494e:	bfa8      	it	ge
 8004950:	6821      	ldrge	r1, [r4, #0]
 8004952:	60a6      	str	r6, [r4, #8]
 8004954:	bfa4      	itt	ge
 8004956:	f021 0104 	bicge.w	r1, r1, #4
 800495a:	6021      	strge	r1, [r4, #0]
 800495c:	b90d      	cbnz	r5, 8004962 <_printf_i+0x11a>
 800495e:	2e00      	cmp	r6, #0
 8004960:	d04d      	beq.n	80049fe <_printf_i+0x1b6>
 8004962:	4616      	mov	r6, r2
 8004964:	fbb5 f1f3 	udiv	r1, r5, r3
 8004968:	fb03 5711 	mls	r7, r3, r1, r5
 800496c:	5dc7      	ldrb	r7, [r0, r7]
 800496e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004972:	462f      	mov	r7, r5
 8004974:	42bb      	cmp	r3, r7
 8004976:	460d      	mov	r5, r1
 8004978:	d9f4      	bls.n	8004964 <_printf_i+0x11c>
 800497a:	2b08      	cmp	r3, #8
 800497c:	d10b      	bne.n	8004996 <_printf_i+0x14e>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	07df      	lsls	r7, r3, #31
 8004982:	d508      	bpl.n	8004996 <_printf_i+0x14e>
 8004984:	6923      	ldr	r3, [r4, #16]
 8004986:	6861      	ldr	r1, [r4, #4]
 8004988:	4299      	cmp	r1, r3
 800498a:	bfde      	ittt	le
 800498c:	2330      	movle	r3, #48	; 0x30
 800498e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004992:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004996:	1b92      	subs	r2, r2, r6
 8004998:	6122      	str	r2, [r4, #16]
 800499a:	464b      	mov	r3, r9
 800499c:	4621      	mov	r1, r4
 800499e:	4640      	mov	r0, r8
 80049a0:	f8cd a000 	str.w	sl, [sp]
 80049a4:	aa03      	add	r2, sp, #12
 80049a6:	f7ff fedf 	bl	8004768 <_printf_common>
 80049aa:	3001      	adds	r0, #1
 80049ac:	d14c      	bne.n	8004a48 <_printf_i+0x200>
 80049ae:	f04f 30ff 	mov.w	r0, #4294967295
 80049b2:	b004      	add	sp, #16
 80049b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b8:	4834      	ldr	r0, [pc, #208]	; (8004a8c <_printf_i+0x244>)
 80049ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049be:	680e      	ldr	r6, [r1, #0]
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80049c6:	061f      	lsls	r7, r3, #24
 80049c8:	600e      	str	r6, [r1, #0]
 80049ca:	d514      	bpl.n	80049f6 <_printf_i+0x1ae>
 80049cc:	07d9      	lsls	r1, r3, #31
 80049ce:	bf44      	itt	mi
 80049d0:	f043 0320 	orrmi.w	r3, r3, #32
 80049d4:	6023      	strmi	r3, [r4, #0]
 80049d6:	b91d      	cbnz	r5, 80049e0 <_printf_i+0x198>
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	f023 0320 	bic.w	r3, r3, #32
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	2310      	movs	r3, #16
 80049e2:	e7af      	b.n	8004944 <_printf_i+0xfc>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	f043 0320 	orr.w	r3, r3, #32
 80049ea:	6023      	str	r3, [r4, #0]
 80049ec:	2378      	movs	r3, #120	; 0x78
 80049ee:	4828      	ldr	r0, [pc, #160]	; (8004a90 <_printf_i+0x248>)
 80049f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049f4:	e7e3      	b.n	80049be <_printf_i+0x176>
 80049f6:	065e      	lsls	r6, r3, #25
 80049f8:	bf48      	it	mi
 80049fa:	b2ad      	uxthmi	r5, r5
 80049fc:	e7e6      	b.n	80049cc <_printf_i+0x184>
 80049fe:	4616      	mov	r6, r2
 8004a00:	e7bb      	b.n	800497a <_printf_i+0x132>
 8004a02:	680b      	ldr	r3, [r1, #0]
 8004a04:	6826      	ldr	r6, [r4, #0]
 8004a06:	1d1d      	adds	r5, r3, #4
 8004a08:	6960      	ldr	r0, [r4, #20]
 8004a0a:	600d      	str	r5, [r1, #0]
 8004a0c:	0635      	lsls	r5, r6, #24
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	d501      	bpl.n	8004a16 <_printf_i+0x1ce>
 8004a12:	6018      	str	r0, [r3, #0]
 8004a14:	e002      	b.n	8004a1c <_printf_i+0x1d4>
 8004a16:	0671      	lsls	r1, r6, #25
 8004a18:	d5fb      	bpl.n	8004a12 <_printf_i+0x1ca>
 8004a1a:	8018      	strh	r0, [r3, #0]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	4616      	mov	r6, r2
 8004a20:	6123      	str	r3, [r4, #16]
 8004a22:	e7ba      	b.n	800499a <_printf_i+0x152>
 8004a24:	680b      	ldr	r3, [r1, #0]
 8004a26:	1d1a      	adds	r2, r3, #4
 8004a28:	600a      	str	r2, [r1, #0]
 8004a2a:	681e      	ldr	r6, [r3, #0]
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	4630      	mov	r0, r6
 8004a30:	6862      	ldr	r2, [r4, #4]
 8004a32:	f000 f82f 	bl	8004a94 <memchr>
 8004a36:	b108      	cbz	r0, 8004a3c <_printf_i+0x1f4>
 8004a38:	1b80      	subs	r0, r0, r6
 8004a3a:	6060      	str	r0, [r4, #4]
 8004a3c:	6863      	ldr	r3, [r4, #4]
 8004a3e:	6123      	str	r3, [r4, #16]
 8004a40:	2300      	movs	r3, #0
 8004a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a46:	e7a8      	b.n	800499a <_printf_i+0x152>
 8004a48:	4632      	mov	r2, r6
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	4640      	mov	r0, r8
 8004a4e:	6923      	ldr	r3, [r4, #16]
 8004a50:	47d0      	blx	sl
 8004a52:	3001      	adds	r0, #1
 8004a54:	d0ab      	beq.n	80049ae <_printf_i+0x166>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	079b      	lsls	r3, r3, #30
 8004a5a:	d413      	bmi.n	8004a84 <_printf_i+0x23c>
 8004a5c:	68e0      	ldr	r0, [r4, #12]
 8004a5e:	9b03      	ldr	r3, [sp, #12]
 8004a60:	4298      	cmp	r0, r3
 8004a62:	bfb8      	it	lt
 8004a64:	4618      	movlt	r0, r3
 8004a66:	e7a4      	b.n	80049b2 <_printf_i+0x16a>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	4632      	mov	r2, r6
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	4640      	mov	r0, r8
 8004a70:	47d0      	blx	sl
 8004a72:	3001      	adds	r0, #1
 8004a74:	d09b      	beq.n	80049ae <_printf_i+0x166>
 8004a76:	3501      	adds	r5, #1
 8004a78:	68e3      	ldr	r3, [r4, #12]
 8004a7a:	9903      	ldr	r1, [sp, #12]
 8004a7c:	1a5b      	subs	r3, r3, r1
 8004a7e:	42ab      	cmp	r3, r5
 8004a80:	dcf2      	bgt.n	8004a68 <_printf_i+0x220>
 8004a82:	e7eb      	b.n	8004a5c <_printf_i+0x214>
 8004a84:	2500      	movs	r5, #0
 8004a86:	f104 0619 	add.w	r6, r4, #25
 8004a8a:	e7f5      	b.n	8004a78 <_printf_i+0x230>
 8004a8c:	08004e60 	.word	0x08004e60
 8004a90:	08004e71 	.word	0x08004e71

08004a94 <memchr>:
 8004a94:	4603      	mov	r3, r0
 8004a96:	b510      	push	{r4, lr}
 8004a98:	b2c9      	uxtb	r1, r1
 8004a9a:	4402      	add	r2, r0
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	d101      	bne.n	8004aa6 <memchr+0x12>
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	e003      	b.n	8004aae <memchr+0x1a>
 8004aa6:	7804      	ldrb	r4, [r0, #0]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	428c      	cmp	r4, r1
 8004aac:	d1f6      	bne.n	8004a9c <memchr+0x8>
 8004aae:	bd10      	pop	{r4, pc}

08004ab0 <memcpy>:
 8004ab0:	440a      	add	r2, r1
 8004ab2:	4291      	cmp	r1, r2
 8004ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ab8:	d100      	bne.n	8004abc <memcpy+0xc>
 8004aba:	4770      	bx	lr
 8004abc:	b510      	push	{r4, lr}
 8004abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ac2:	4291      	cmp	r1, r2
 8004ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ac8:	d1f9      	bne.n	8004abe <memcpy+0xe>
 8004aca:	bd10      	pop	{r4, pc}

08004acc <memmove>:
 8004acc:	4288      	cmp	r0, r1
 8004ace:	b510      	push	{r4, lr}
 8004ad0:	eb01 0402 	add.w	r4, r1, r2
 8004ad4:	d902      	bls.n	8004adc <memmove+0x10>
 8004ad6:	4284      	cmp	r4, r0
 8004ad8:	4623      	mov	r3, r4
 8004ada:	d807      	bhi.n	8004aec <memmove+0x20>
 8004adc:	1e43      	subs	r3, r0, #1
 8004ade:	42a1      	cmp	r1, r4
 8004ae0:	d008      	beq.n	8004af4 <memmove+0x28>
 8004ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aea:	e7f8      	b.n	8004ade <memmove+0x12>
 8004aec:	4601      	mov	r1, r0
 8004aee:	4402      	add	r2, r0
 8004af0:	428a      	cmp	r2, r1
 8004af2:	d100      	bne.n	8004af6 <memmove+0x2a>
 8004af4:	bd10      	pop	{r4, pc}
 8004af6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004afa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004afe:	e7f7      	b.n	8004af0 <memmove+0x24>

08004b00 <_free_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	4605      	mov	r5, r0
 8004b04:	2900      	cmp	r1, #0
 8004b06:	d043      	beq.n	8004b90 <_free_r+0x90>
 8004b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b0c:	1f0c      	subs	r4, r1, #4
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bfb8      	it	lt
 8004b12:	18e4      	addlt	r4, r4, r3
 8004b14:	f000 f8d0 	bl	8004cb8 <__malloc_lock>
 8004b18:	4a1e      	ldr	r2, [pc, #120]	; (8004b94 <_free_r+0x94>)
 8004b1a:	6813      	ldr	r3, [r2, #0]
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	b933      	cbnz	r3, 8004b2e <_free_r+0x2e>
 8004b20:	6063      	str	r3, [r4, #4]
 8004b22:	6014      	str	r4, [r2, #0]
 8004b24:	4628      	mov	r0, r5
 8004b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b2a:	f000 b8cb 	b.w	8004cc4 <__malloc_unlock>
 8004b2e:	42a3      	cmp	r3, r4
 8004b30:	d90a      	bls.n	8004b48 <_free_r+0x48>
 8004b32:	6821      	ldr	r1, [r4, #0]
 8004b34:	1862      	adds	r2, r4, r1
 8004b36:	4293      	cmp	r3, r2
 8004b38:	bf01      	itttt	eq
 8004b3a:	681a      	ldreq	r2, [r3, #0]
 8004b3c:	685b      	ldreq	r3, [r3, #4]
 8004b3e:	1852      	addeq	r2, r2, r1
 8004b40:	6022      	streq	r2, [r4, #0]
 8004b42:	6063      	str	r3, [r4, #4]
 8004b44:	6004      	str	r4, [r0, #0]
 8004b46:	e7ed      	b.n	8004b24 <_free_r+0x24>
 8004b48:	461a      	mov	r2, r3
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	b10b      	cbz	r3, 8004b52 <_free_r+0x52>
 8004b4e:	42a3      	cmp	r3, r4
 8004b50:	d9fa      	bls.n	8004b48 <_free_r+0x48>
 8004b52:	6811      	ldr	r1, [r2, #0]
 8004b54:	1850      	adds	r0, r2, r1
 8004b56:	42a0      	cmp	r0, r4
 8004b58:	d10b      	bne.n	8004b72 <_free_r+0x72>
 8004b5a:	6820      	ldr	r0, [r4, #0]
 8004b5c:	4401      	add	r1, r0
 8004b5e:	1850      	adds	r0, r2, r1
 8004b60:	4283      	cmp	r3, r0
 8004b62:	6011      	str	r1, [r2, #0]
 8004b64:	d1de      	bne.n	8004b24 <_free_r+0x24>
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4401      	add	r1, r0
 8004b6c:	6011      	str	r1, [r2, #0]
 8004b6e:	6053      	str	r3, [r2, #4]
 8004b70:	e7d8      	b.n	8004b24 <_free_r+0x24>
 8004b72:	d902      	bls.n	8004b7a <_free_r+0x7a>
 8004b74:	230c      	movs	r3, #12
 8004b76:	602b      	str	r3, [r5, #0]
 8004b78:	e7d4      	b.n	8004b24 <_free_r+0x24>
 8004b7a:	6820      	ldr	r0, [r4, #0]
 8004b7c:	1821      	adds	r1, r4, r0
 8004b7e:	428b      	cmp	r3, r1
 8004b80:	bf01      	itttt	eq
 8004b82:	6819      	ldreq	r1, [r3, #0]
 8004b84:	685b      	ldreq	r3, [r3, #4]
 8004b86:	1809      	addeq	r1, r1, r0
 8004b88:	6021      	streq	r1, [r4, #0]
 8004b8a:	6063      	str	r3, [r4, #4]
 8004b8c:	6054      	str	r4, [r2, #4]
 8004b8e:	e7c9      	b.n	8004b24 <_free_r+0x24>
 8004b90:	bd38      	pop	{r3, r4, r5, pc}
 8004b92:	bf00      	nop
 8004b94:	2000009c 	.word	0x2000009c

08004b98 <_malloc_r>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	1ccd      	adds	r5, r1, #3
 8004b9c:	f025 0503 	bic.w	r5, r5, #3
 8004ba0:	3508      	adds	r5, #8
 8004ba2:	2d0c      	cmp	r5, #12
 8004ba4:	bf38      	it	cc
 8004ba6:	250c      	movcc	r5, #12
 8004ba8:	2d00      	cmp	r5, #0
 8004baa:	4606      	mov	r6, r0
 8004bac:	db01      	blt.n	8004bb2 <_malloc_r+0x1a>
 8004bae:	42a9      	cmp	r1, r5
 8004bb0:	d903      	bls.n	8004bba <_malloc_r+0x22>
 8004bb2:	230c      	movs	r3, #12
 8004bb4:	6033      	str	r3, [r6, #0]
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bba:	f000 f87d 	bl	8004cb8 <__malloc_lock>
 8004bbe:	4921      	ldr	r1, [pc, #132]	; (8004c44 <_malloc_r+0xac>)
 8004bc0:	680a      	ldr	r2, [r1, #0]
 8004bc2:	4614      	mov	r4, r2
 8004bc4:	b99c      	cbnz	r4, 8004bee <_malloc_r+0x56>
 8004bc6:	4f20      	ldr	r7, [pc, #128]	; (8004c48 <_malloc_r+0xb0>)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	b923      	cbnz	r3, 8004bd6 <_malloc_r+0x3e>
 8004bcc:	4621      	mov	r1, r4
 8004bce:	4630      	mov	r0, r6
 8004bd0:	f000 f862 	bl	8004c98 <_sbrk_r>
 8004bd4:	6038      	str	r0, [r7, #0]
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f000 f85d 	bl	8004c98 <_sbrk_r>
 8004bde:	1c43      	adds	r3, r0, #1
 8004be0:	d123      	bne.n	8004c2a <_malloc_r+0x92>
 8004be2:	230c      	movs	r3, #12
 8004be4:	4630      	mov	r0, r6
 8004be6:	6033      	str	r3, [r6, #0]
 8004be8:	f000 f86c 	bl	8004cc4 <__malloc_unlock>
 8004bec:	e7e3      	b.n	8004bb6 <_malloc_r+0x1e>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	1b5b      	subs	r3, r3, r5
 8004bf2:	d417      	bmi.n	8004c24 <_malloc_r+0x8c>
 8004bf4:	2b0b      	cmp	r3, #11
 8004bf6:	d903      	bls.n	8004c00 <_malloc_r+0x68>
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	441c      	add	r4, r3
 8004bfc:	6025      	str	r5, [r4, #0]
 8004bfe:	e004      	b.n	8004c0a <_malloc_r+0x72>
 8004c00:	6863      	ldr	r3, [r4, #4]
 8004c02:	42a2      	cmp	r2, r4
 8004c04:	bf0c      	ite	eq
 8004c06:	600b      	streq	r3, [r1, #0]
 8004c08:	6053      	strne	r3, [r2, #4]
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f000 f85a 	bl	8004cc4 <__malloc_unlock>
 8004c10:	f104 000b 	add.w	r0, r4, #11
 8004c14:	1d23      	adds	r3, r4, #4
 8004c16:	f020 0007 	bic.w	r0, r0, #7
 8004c1a:	1ac2      	subs	r2, r0, r3
 8004c1c:	d0cc      	beq.n	8004bb8 <_malloc_r+0x20>
 8004c1e:	1a1b      	subs	r3, r3, r0
 8004c20:	50a3      	str	r3, [r4, r2]
 8004c22:	e7c9      	b.n	8004bb8 <_malloc_r+0x20>
 8004c24:	4622      	mov	r2, r4
 8004c26:	6864      	ldr	r4, [r4, #4]
 8004c28:	e7cc      	b.n	8004bc4 <_malloc_r+0x2c>
 8004c2a:	1cc4      	adds	r4, r0, #3
 8004c2c:	f024 0403 	bic.w	r4, r4, #3
 8004c30:	42a0      	cmp	r0, r4
 8004c32:	d0e3      	beq.n	8004bfc <_malloc_r+0x64>
 8004c34:	1a21      	subs	r1, r4, r0
 8004c36:	4630      	mov	r0, r6
 8004c38:	f000 f82e 	bl	8004c98 <_sbrk_r>
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d1dd      	bne.n	8004bfc <_malloc_r+0x64>
 8004c40:	e7cf      	b.n	8004be2 <_malloc_r+0x4a>
 8004c42:	bf00      	nop
 8004c44:	2000009c 	.word	0x2000009c
 8004c48:	200000a0 	.word	0x200000a0

08004c4c <_realloc_r>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	4607      	mov	r7, r0
 8004c50:	4614      	mov	r4, r2
 8004c52:	460e      	mov	r6, r1
 8004c54:	b921      	cbnz	r1, 8004c60 <_realloc_r+0x14>
 8004c56:	4611      	mov	r1, r2
 8004c58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c5c:	f7ff bf9c 	b.w	8004b98 <_malloc_r>
 8004c60:	b922      	cbnz	r2, 8004c6c <_realloc_r+0x20>
 8004c62:	f7ff ff4d 	bl	8004b00 <_free_r>
 8004c66:	4625      	mov	r5, r4
 8004c68:	4628      	mov	r0, r5
 8004c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c6c:	f000 f830 	bl	8004cd0 <_malloc_usable_size_r>
 8004c70:	42a0      	cmp	r0, r4
 8004c72:	d20f      	bcs.n	8004c94 <_realloc_r+0x48>
 8004c74:	4621      	mov	r1, r4
 8004c76:	4638      	mov	r0, r7
 8004c78:	f7ff ff8e 	bl	8004b98 <_malloc_r>
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d0f2      	beq.n	8004c68 <_realloc_r+0x1c>
 8004c82:	4631      	mov	r1, r6
 8004c84:	4622      	mov	r2, r4
 8004c86:	f7ff ff13 	bl	8004ab0 <memcpy>
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	f7ff ff37 	bl	8004b00 <_free_r>
 8004c92:	e7e9      	b.n	8004c68 <_realloc_r+0x1c>
 8004c94:	4635      	mov	r5, r6
 8004c96:	e7e7      	b.n	8004c68 <_realloc_r+0x1c>

08004c98 <_sbrk_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	4d05      	ldr	r5, [pc, #20]	; (8004cb4 <_sbrk_r+0x1c>)
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	4608      	mov	r0, r1
 8004ca2:	602b      	str	r3, [r5, #0]
 8004ca4:	f7fc f86e 	bl	8000d84 <_sbrk>
 8004ca8:	1c43      	adds	r3, r0, #1
 8004caa:	d102      	bne.n	8004cb2 <_sbrk_r+0x1a>
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	b103      	cbz	r3, 8004cb2 <_sbrk_r+0x1a>
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	bd38      	pop	{r3, r4, r5, pc}
 8004cb4:	20000394 	.word	0x20000394

08004cb8 <__malloc_lock>:
 8004cb8:	4801      	ldr	r0, [pc, #4]	; (8004cc0 <__malloc_lock+0x8>)
 8004cba:	f000 b811 	b.w	8004ce0 <__retarget_lock_acquire_recursive>
 8004cbe:	bf00      	nop
 8004cc0:	2000039c 	.word	0x2000039c

08004cc4 <__malloc_unlock>:
 8004cc4:	4801      	ldr	r0, [pc, #4]	; (8004ccc <__malloc_unlock+0x8>)
 8004cc6:	f000 b80c 	b.w	8004ce2 <__retarget_lock_release_recursive>
 8004cca:	bf00      	nop
 8004ccc:	2000039c 	.word	0x2000039c

08004cd0 <_malloc_usable_size_r>:
 8004cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd4:	1f18      	subs	r0, r3, #4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	bfbc      	itt	lt
 8004cda:	580b      	ldrlt	r3, [r1, r0]
 8004cdc:	18c0      	addlt	r0, r0, r3
 8004cde:	4770      	bx	lr

08004ce0 <__retarget_lock_acquire_recursive>:
 8004ce0:	4770      	bx	lr

08004ce2 <__retarget_lock_release_recursive>:
 8004ce2:	4770      	bx	lr

08004ce4 <_init>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr

08004cf0 <_fini>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr
